/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 205.0, "minX": 0.0, "maxY": 4346.0, "series": [{"data": [[0.0, 1096.0], [0.1, 1097.0], [0.2, 1169.0], [0.3, 1176.0], [0.4, 1187.0], [0.5, 1190.0], [0.6, 1207.0], [0.7, 1260.0], [0.8, 1264.0], [0.9, 1264.0], [1.0, 1268.0], [1.1, 1270.0], [1.2, 1271.0], [1.3, 1275.0], [1.4, 1275.0], [1.5, 1276.0], [1.6, 1277.0], [1.7, 1278.0], [1.8, 1280.0], [1.9, 1281.0], [2.0, 1282.0], [2.1, 1282.0], [2.2, 1283.0], [2.3, 1284.0], [2.4, 1285.0], [2.5, 1295.0], [2.6, 1368.0], [2.7, 1368.0], [2.8, 1371.0], [2.9, 1372.0], [3.0, 1374.0], [3.1, 1382.0], [3.2, 1458.0], [3.3, 1460.0], [3.4, 1646.0], [3.5, 1647.0], [3.6, 2036.0], [3.7, 2037.0], [3.8, 2041.0], [3.9, 2210.0], [4.0, 2219.0], [4.1, 2219.0], [4.2, 2220.0], [4.3, 2224.0], [4.4, 2224.0], [4.5, 2225.0], [4.6, 2227.0], [4.7, 2300.0], [4.8, 2301.0], [4.9, 2307.0], [5.0, 2308.0], [5.1, 2309.0], [5.2, 2394.0], [5.3, 2396.0], [5.4, 2404.0], [5.5, 2405.0], [5.6, 2406.0], [5.7, 2411.0], [5.8, 2411.0], [5.9, 2411.0], [6.0, 2411.0], [6.1, 2411.0], [6.2, 2412.0], [6.3, 2412.0], [6.4, 2412.0], [6.5, 2412.0], [6.6, 2413.0], [6.7, 2413.0], [6.8, 2413.0], [6.9, 2413.0], [7.0, 2413.0], [7.1, 2414.0], [7.2, 2415.0], [7.3, 2416.0], [7.4, 2418.0], [7.5, 2419.0], [7.6, 2420.0], [7.7, 2489.0], [7.8, 2491.0], [7.9, 2491.0], [8.0, 2493.0], [8.1, 2502.0], [8.2, 2506.0], [8.3, 2507.0], [8.4, 2589.0], [8.5, 2590.0], [8.6, 2596.0], [8.7, 2600.0], [8.8, 2616.0], [8.9, 2675.0], [9.0, 2679.0], [9.1, 2679.0], [9.2, 2683.0], [9.3, 2685.0], [9.4, 2686.0], [9.5, 2689.0], [9.6, 2689.0], [9.7, 2698.0], [9.8, 2700.0], [9.9, 2700.0], [10.0, 2701.0], [10.1, 2703.0], [10.2, 2704.0], [10.3, 2708.0], [10.4, 2708.0], [10.5, 2710.0], [10.6, 2715.0], [10.7, 2718.0], [10.8, 2720.0], [10.9, 2720.0], [11.0, 2726.0], [11.1, 2762.0], [11.2, 2770.0], [11.3, 2783.0], [11.4, 2786.0], [11.5, 2786.0], [11.6, 2789.0], [11.7, 2789.0], [11.8, 2790.0], [11.9, 2790.0], [12.0, 2790.0], [12.1, 2791.0], [12.2, 2792.0], [12.3, 2793.0], [12.4, 2793.0], [12.5, 2795.0], [12.6, 2797.0], [12.7, 2800.0], [12.8, 2801.0], [12.9, 2801.0], [13.0, 2802.0], [13.1, 2802.0], [13.2, 2803.0], [13.3, 2804.0], [13.4, 2804.0], [13.5, 2805.0], [13.6, 2807.0], [13.7, 2809.0], [13.8, 2810.0], [13.9, 2811.0], [14.0, 2812.0], [14.1, 2827.0], [14.2, 2827.0], [14.3, 2827.0], [14.4, 2828.0], [14.5, 2828.0], [14.6, 2828.0], [14.7, 2829.0], [14.8, 2835.0], [14.9, 2838.0], [15.0, 2857.0], [15.1, 2861.0], [15.2, 2864.0], [15.3, 2867.0], [15.4, 2869.0], [15.5, 2869.0], [15.6, 2870.0], [15.7, 2871.0], [15.8, 2871.0], [15.9, 2872.0], [16.0, 2873.0], [16.1, 2873.0], [16.2, 2877.0], [16.3, 2877.0], [16.4, 2877.0], [16.5, 2879.0], [16.6, 2879.0], [16.7, 2883.0], [16.8, 2883.0], [16.9, 2884.0], [17.0, 2886.0], [17.1, 2886.0], [17.2, 2887.0], [17.3, 2889.0], [17.4, 2892.0], [17.5, 2894.0], [17.6, 2896.0], [17.7, 2897.0], [17.8, 2898.0], [17.9, 2898.0], [18.0, 2899.0], [18.1, 2899.0], [18.2, 2899.0], [18.3, 2900.0], [18.4, 2900.0], [18.5, 2900.0], [18.6, 2902.0], [18.7, 2902.0], [18.8, 2903.0], [18.9, 2903.0], [19.0, 2903.0], [19.1, 2904.0], [19.2, 2904.0], [19.3, 2905.0], [19.4, 2905.0], [19.5, 2906.0], [19.6, 2906.0], [19.7, 2907.0], [19.8, 2914.0], [19.9, 2950.0], [20.0, 2955.0], [20.1, 2956.0], [20.2, 2958.0], [20.3, 2959.0], [20.4, 2959.0], [20.5, 2962.0], [20.6, 2963.0], [20.7, 2964.0], [20.8, 2965.0], [20.9, 2966.0], [21.0, 2966.0], [21.1, 2970.0], [21.2, 2973.0], [21.3, 2973.0], [21.4, 2976.0], [21.5, 2977.0], [21.6, 2978.0], [21.7, 2981.0], [21.8, 2985.0], [21.9, 2985.0], [22.0, 2986.0], [22.1, 2986.0], [22.2, 2987.0], [22.3, 2988.0], [22.4, 2988.0], [22.5, 2989.0], [22.6, 2989.0], [22.7, 2990.0], [22.8, 2991.0], [22.9, 2992.0], [23.0, 2992.0], [23.1, 2994.0], [23.2, 2996.0], [23.3, 2997.0], [23.4, 2998.0], [23.5, 2999.0], [23.6, 3001.0], [23.7, 3007.0], [23.8, 3008.0], [23.9, 3009.0], [24.0, 3010.0], [24.1, 3014.0], [24.2, 3020.0], [24.3, 3021.0], [24.4, 3035.0], [24.5, 3049.0], [24.6, 3064.0], [24.7, 3065.0], [24.8, 3069.0], [24.9, 3071.0], [25.0, 3071.0], [25.1, 3072.0], [25.2, 3073.0], [25.3, 3074.0], [25.4, 3075.0], [25.5, 3076.0], [25.6, 3077.0], [25.7, 3078.0], [25.8, 3078.0], [25.9, 3079.0], [26.0, 3080.0], [26.1, 3081.0], [26.2, 3083.0], [26.3, 3083.0], [26.4, 3084.0], [26.5, 3084.0], [26.6, 3085.0], [26.7, 3086.0], [26.8, 3086.0], [26.9, 3087.0], [27.0, 3088.0], [27.1, 3088.0], [27.2, 3089.0], [27.3, 3090.0], [27.4, 3091.0], [27.5, 3092.0], [27.6, 3092.0], [27.7, 3094.0], [27.8, 3095.0], [27.9, 3096.0], [28.0, 3096.0], [28.1, 3098.0], [28.2, 3101.0], [28.3, 3108.0], [28.4, 3111.0], [28.5, 3111.0], [28.6, 3154.0], [28.7, 3157.0], [28.8, 3160.0], [28.9, 3162.0], [29.0, 3165.0], [29.1, 3165.0], [29.2, 3165.0], [29.3, 3167.0], [29.4, 3167.0], [29.5, 3167.0], [29.6, 3172.0], [29.7, 3173.0], [29.8, 3173.0], [29.9, 3174.0], [30.0, 3174.0], [30.1, 3175.0], [30.2, 3179.0], [30.3, 3179.0], [30.4, 3181.0], [30.5, 3182.0], [30.6, 3182.0], [30.7, 3183.0], [30.8, 3186.0], [30.9, 3186.0], [31.0, 3186.0], [31.1, 3188.0], [31.2, 3188.0], [31.3, 3189.0], [31.4, 3192.0], [31.5, 3192.0], [31.6, 3194.0], [31.7, 3196.0], [31.8, 3198.0], [31.9, 3199.0], [32.0, 3199.0], [32.1, 3204.0], [32.2, 3249.0], [32.3, 3257.0], [32.4, 3257.0], [32.5, 3258.0], [32.6, 3259.0], [32.7, 3259.0], [32.8, 3260.0], [32.9, 3260.0], [33.0, 3260.0], [33.1, 3262.0], [33.2, 3262.0], [33.3, 3263.0], [33.4, 3264.0], [33.5, 3264.0], [33.6, 3265.0], [33.7, 3265.0], [33.8, 3265.0], [33.9, 3266.0], [34.0, 3266.0], [34.1, 3266.0], [34.2, 3266.0], [34.3, 3269.0], [34.4, 3269.0], [34.5, 3270.0], [34.6, 3270.0], [34.7, 3271.0], [34.8, 3274.0], [34.9, 3274.0], [35.0, 3274.0], [35.1, 3276.0], [35.2, 3278.0], [35.3, 3279.0], [35.4, 3281.0], [35.5, 3281.0], [35.6, 3282.0], [35.7, 3283.0], [35.8, 3284.0], [35.9, 3284.0], [36.0, 3287.0], [36.1, 3288.0], [36.2, 3288.0], [36.3, 3290.0], [36.4, 3290.0], [36.5, 3290.0], [36.6, 3290.0], [36.7, 3291.0], [36.8, 3291.0], [36.9, 3292.0], [37.0, 3293.0], [37.1, 3293.0], [37.2, 3293.0], [37.3, 3293.0], [37.4, 3294.0], [37.5, 3295.0], [37.6, 3298.0], [37.7, 3298.0], [37.8, 3298.0], [37.9, 3299.0], [38.0, 3299.0], [38.1, 3299.0], [38.2, 3300.0], [38.3, 3301.0], [38.4, 3301.0], [38.5, 3301.0], [38.6, 3301.0], [38.7, 3302.0], [38.8, 3302.0], [38.9, 3303.0], [39.0, 3304.0], [39.1, 3304.0], [39.2, 3305.0], [39.3, 3307.0], [39.4, 3308.0], [39.5, 3311.0], [39.6, 3354.0], [39.7, 3356.0], [39.8, 3359.0], [39.9, 3359.0], [40.0, 3362.0], [40.1, 3363.0], [40.2, 3363.0], [40.3, 3365.0], [40.4, 3366.0], [40.5, 3367.0], [40.6, 3368.0], [40.7, 3369.0], [40.8, 3371.0], [40.9, 3374.0], [41.0, 3374.0], [41.1, 3375.0], [41.2, 3376.0], [41.3, 3376.0], [41.4, 3378.0], [41.5, 3379.0], [41.6, 3380.0], [41.7, 3380.0], [41.8, 3383.0], [41.9, 3385.0], [42.0, 3385.0], [42.1, 3387.0], [42.2, 3387.0], [42.3, 3388.0], [42.4, 3392.0], [42.5, 3392.0], [42.6, 3393.0], [42.7, 3395.0], [42.8, 3396.0], [42.9, 3398.0], [43.0, 3400.0], [43.1, 3403.0], [43.2, 3406.0], [43.3, 3409.0], [43.4, 3411.0], [43.5, 3413.0], [43.6, 3423.0], [43.7, 3428.0], [43.8, 3438.0], [43.9, 3438.0], [44.0, 3441.0], [44.1, 3454.0], [44.2, 3458.0], [44.3, 3463.0], [44.4, 3467.0], [44.5, 3467.0], [44.6, 3468.0], [44.7, 3471.0], [44.8, 3471.0], [44.9, 3476.0], [45.0, 3478.0], [45.1, 3479.0], [45.2, 3482.0], [45.3, 3488.0], [45.4, 3490.0], [45.5, 3491.0], [45.6, 3503.0], [45.7, 3505.0], [45.8, 3510.0], [45.9, 3517.0], [46.0, 3517.0], [46.1, 3520.0], [46.2, 3521.0], [46.3, 3522.0], [46.4, 3534.0], [46.5, 3534.0], [46.6, 3538.0], [46.7, 3539.0], [46.8, 3540.0], [46.9, 3541.0], [47.0, 3548.0], [47.1, 3550.0], [47.2, 3552.0], [47.3, 3552.0], [47.4, 3552.0], [47.5, 3552.0], [47.6, 3553.0], [47.7, 3553.0], [47.8, 3556.0], [47.9, 3557.0], [48.0, 3557.0], [48.1, 3559.0], [48.2, 3562.0], [48.3, 3563.0], [48.4, 3566.0], [48.5, 3568.0], [48.6, 3570.0], [48.7, 3571.0], [48.8, 3572.0], [48.9, 3573.0], [49.0, 3574.0], [49.1, 3575.0], [49.2, 3575.0], [49.3, 3575.0], [49.4, 3577.0], [49.5, 3578.0], [49.6, 3580.0], [49.7, 3581.0], [49.8, 3581.0], [49.9, 3582.0], [50.0, 3582.0], [50.1, 3583.0], [50.2, 3584.0], [50.3, 3584.0], [50.4, 3585.0], [50.5, 3588.0], [50.6, 3588.0], [50.7, 3589.0], [50.8, 3589.0], [50.9, 3589.0], [51.0, 3589.0], [51.1, 3590.0], [51.2, 3590.0], [51.3, 3590.0], [51.4, 3590.0], [51.5, 3590.0], [51.6, 3590.0], [51.7, 3591.0], [51.8, 3591.0], [51.9, 3592.0], [52.0, 3592.0], [52.1, 3593.0], [52.2, 3593.0], [52.3, 3594.0], [52.4, 3594.0], [52.5, 3595.0], [52.6, 3596.0], [52.7, 3596.0], [52.8, 3597.0], [52.9, 3597.0], [53.0, 3599.0], [53.1, 3600.0], [53.2, 3600.0], [53.3, 3602.0], [53.4, 3604.0], [53.5, 3605.0], [53.6, 3605.0], [53.7, 3606.0], [53.8, 3607.0], [53.9, 3607.0], [54.0, 3610.0], [54.1, 3611.0], [54.2, 3614.0], [54.3, 3616.0], [54.4, 3624.0], [54.5, 3626.0], [54.6, 3636.0], [54.7, 3643.0], [54.8, 3653.0], [54.9, 3655.0], [55.0, 3655.0], [55.1, 3656.0], [55.2, 3657.0], [55.3, 3658.0], [55.4, 3659.0], [55.5, 3660.0], [55.6, 3661.0], [55.7, 3661.0], [55.8, 3662.0], [55.9, 3662.0], [56.0, 3663.0], [56.1, 3664.0], [56.2, 3664.0], [56.3, 3664.0], [56.4, 3665.0], [56.5, 3665.0], [56.6, 3666.0], [56.7, 3666.0], [56.8, 3666.0], [56.9, 3667.0], [57.0, 3667.0], [57.1, 3667.0], [57.2, 3668.0], [57.3, 3668.0], [57.4, 3668.0], [57.5, 3668.0], [57.6, 3669.0], [57.7, 3669.0], [57.8, 3669.0], [57.9, 3670.0], [58.0, 3670.0], [58.1, 3670.0], [58.2, 3671.0], [58.3, 3671.0], [58.4, 3671.0], [58.5, 3673.0], [58.6, 3673.0], [58.7, 3673.0], [58.8, 3673.0], [58.9, 3674.0], [59.0, 3674.0], [59.1, 3674.0], [59.2, 3675.0], [59.3, 3675.0], [59.4, 3675.0], [59.5, 3676.0], [59.6, 3676.0], [59.7, 3676.0], [59.8, 3677.0], [59.9, 3677.0], [60.0, 3677.0], [60.1, 3677.0], [60.2, 3678.0], [60.3, 3678.0], [60.4, 3678.0], [60.5, 3678.0], [60.6, 3678.0], [60.7, 3678.0], [60.8, 3679.0], [60.9, 3679.0], [61.0, 3679.0], [61.1, 3680.0], [61.2, 3680.0], [61.3, 3680.0], [61.4, 3681.0], [61.5, 3681.0], [61.6, 3681.0], [61.7, 3682.0], [61.8, 3682.0], [61.9, 3682.0], [62.0, 3683.0], [62.1, 3683.0], [62.2, 3683.0], [62.3, 3683.0], [62.4, 3683.0], [62.5, 3683.0], [62.6, 3684.0], [62.7, 3684.0], [62.8, 3684.0], [62.9, 3685.0], [63.0, 3686.0], [63.1, 3686.0], [63.2, 3686.0], [63.3, 3686.0], [63.4, 3686.0], [63.5, 3687.0], [63.6, 3687.0], [63.7, 3687.0], [63.8, 3687.0], [63.9, 3688.0], [64.0, 3688.0], [64.1, 3688.0], [64.2, 3688.0], [64.3, 3688.0], [64.4, 3689.0], [64.5, 3689.0], [64.6, 3689.0], [64.7, 3689.0], [64.8, 3689.0], [64.9, 3689.0], [65.0, 3689.0], [65.1, 3689.0], [65.2, 3689.0], [65.3, 3690.0], [65.4, 3690.0], [65.5, 3691.0], [65.6, 3691.0], [65.7, 3691.0], [65.8, 3691.0], [65.9, 3691.0], [66.0, 3691.0], [66.1, 3691.0], [66.2, 3692.0], [66.3, 3692.0], [66.4, 3692.0], [66.5, 3692.0], [66.6, 3692.0], [66.7, 3693.0], [66.8, 3693.0], [66.9, 3693.0], [67.0, 3693.0], [67.1, 3694.0], [67.2, 3694.0], [67.3, 3694.0], [67.4, 3695.0], [67.5, 3695.0], [67.6, 3695.0], [67.7, 3696.0], [67.8, 3696.0], [67.9, 3696.0], [68.0, 3697.0], [68.1, 3697.0], [68.2, 3697.0], [68.3, 3697.0], [68.4, 3697.0], [68.5, 3697.0], [68.6, 3698.0], [68.7, 3698.0], [68.8, 3698.0], [68.9, 3698.0], [69.0, 3698.0], [69.1, 3698.0], [69.2, 3698.0], [69.3, 3699.0], [69.4, 3699.0], [69.5, 3699.0], [69.6, 3700.0], [69.7, 3700.0], [69.8, 3700.0], [69.9, 3700.0], [70.0, 3700.0], [70.1, 3701.0], [70.2, 3701.0], [70.3, 3701.0], [70.4, 3701.0], [70.5, 3702.0], [70.6, 3702.0], [70.7, 3702.0], [70.8, 3703.0], [70.9, 3703.0], [71.0, 3703.0], [71.1, 3705.0], [71.2, 3706.0], [71.3, 3706.0], [71.4, 3706.0], [71.5, 3707.0], [71.6, 3707.0], [71.7, 3708.0], [71.8, 3708.0], [71.9, 3708.0], [72.0, 3709.0], [72.1, 3709.0], [72.2, 3710.0], [72.3, 3710.0], [72.4, 3710.0], [72.5, 3713.0], [72.6, 3714.0], [72.7, 3714.0], [72.8, 3715.0], [72.9, 3716.0], [73.0, 3716.0], [73.1, 3719.0], [73.2, 3720.0], [73.3, 3721.0], [73.4, 3724.0], [73.5, 3725.0], [73.6, 3727.0], [73.7, 3728.0], [73.8, 3734.0], [73.9, 3735.0], [74.0, 3742.0], [74.1, 3744.0], [74.2, 3749.0], [74.3, 3749.0], [74.4, 3751.0], [74.5, 3751.0], [74.6, 3752.0], [74.7, 3754.0], [74.8, 3756.0], [74.9, 3758.0], [75.0, 3759.0], [75.1, 3759.0], [75.2, 3760.0], [75.3, 3761.0], [75.4, 3761.0], [75.5, 3762.0], [75.6, 3763.0], [75.7, 3765.0], [75.8, 3765.0], [75.9, 3766.0], [76.0, 3768.0], [76.1, 3769.0], [76.2, 3769.0], [76.3, 3769.0], [76.4, 3769.0], [76.5, 3769.0], [76.6, 3769.0], [76.7, 3769.0], [76.8, 3769.0], [76.9, 3770.0], [77.0, 3771.0], [77.1, 3771.0], [77.2, 3772.0], [77.3, 3773.0], [77.4, 3773.0], [77.5, 3774.0], [77.6, 3774.0], [77.7, 3774.0], [77.8, 3776.0], [77.9, 3776.0], [78.0, 3777.0], [78.1, 3777.0], [78.2, 3777.0], [78.3, 3778.0], [78.4, 3778.0], [78.5, 3778.0], [78.6, 3778.0], [78.7, 3779.0], [78.8, 3779.0], [78.9, 3780.0], [79.0, 3780.0], [79.1, 3781.0], [79.2, 3781.0], [79.3, 3782.0], [79.4, 3782.0], [79.5, 3783.0], [79.6, 3783.0], [79.7, 3784.0], [79.8, 3784.0], [79.9, 3787.0], [80.0, 3787.0], [80.1, 3788.0], [80.2, 3788.0], [80.3, 3788.0], [80.4, 3788.0], [80.5, 3789.0], [80.6, 3790.0], [80.7, 3791.0], [80.8, 3791.0], [80.9, 3792.0], [81.0, 3792.0], [81.1, 3792.0], [81.2, 3792.0], [81.3, 3793.0], [81.4, 3793.0], [81.5, 3794.0], [81.6, 3794.0], [81.7, 3794.0], [81.8, 3795.0], [81.9, 3796.0], [82.0, 3796.0], [82.1, 3797.0], [82.2, 3798.0], [82.3, 3798.0], [82.4, 3799.0], [82.5, 3800.0], [82.6, 3801.0], [82.7, 3807.0], [82.8, 3813.0], [82.9, 3816.0], [83.0, 3834.0], [83.1, 3843.0], [83.2, 3844.0], [83.3, 3849.0], [83.4, 3853.0], [83.5, 3855.0], [83.6, 3857.0], [83.7, 3858.0], [83.8, 3861.0], [83.9, 3863.0], [84.0, 3863.0], [84.1, 3864.0], [84.2, 3865.0], [84.3, 3869.0], [84.4, 3869.0], [84.5, 3870.0], [84.6, 3870.0], [84.7, 3871.0], [84.8, 3872.0], [84.9, 3873.0], [85.0, 3874.0], [85.1, 3875.0], [85.2, 3875.0], [85.3, 3877.0], [85.4, 3877.0], [85.5, 3877.0], [85.6, 3879.0], [85.7, 3880.0], [85.8, 3880.0], [85.9, 3881.0], [86.0, 3883.0], [86.1, 3883.0], [86.2, 3884.0], [86.3, 3888.0], [86.4, 3888.0], [86.5, 3893.0], [86.6, 3893.0], [86.7, 3893.0], [86.8, 3893.0], [86.9, 3894.0], [87.0, 3894.0], [87.1, 3913.0], [87.2, 3926.0], [87.3, 3932.0], [87.4, 3952.0], [87.5, 3952.0], [87.6, 3980.0], [87.7, 3983.0], [87.8, 3985.0], [87.9, 3986.0], [88.0, 3990.0], [88.1, 3990.0], [88.2, 3991.0], [88.3, 3992.0], [88.4, 3993.0], [88.5, 3995.0], [88.6, 3995.0], [88.7, 3995.0], [88.8, 3996.0], [88.9, 3997.0], [89.0, 3997.0], [89.1, 3998.0], [89.2, 4001.0], [89.3, 4002.0], [89.4, 4004.0], [89.5, 4005.0], [89.6, 4006.0], [89.7, 4007.0], [89.8, 4008.0], [89.9, 4009.0], [90.0, 4012.0], [90.1, 4068.0], [90.2, 4070.0], [90.3, 4075.0], [90.4, 4075.0], [90.5, 4076.0], [90.6, 4077.0], [90.7, 4078.0], [90.8, 4080.0], [90.9, 4085.0], [91.0, 4087.0], [91.1, 4090.0], [91.2, 4093.0], [91.3, 4093.0], [91.4, 4098.0], [91.5, 4165.0], [91.6, 4168.0], [91.7, 4170.0], [91.8, 4172.0], [91.9, 4175.0], [92.0, 4175.0], [92.1, 4176.0], [92.2, 4176.0], [92.3, 4177.0], [92.4, 4177.0], [92.5, 4178.0], [92.6, 4178.0], [92.7, 4178.0], [92.8, 4178.0], [92.9, 4180.0], [93.0, 4180.0], [93.1, 4180.0], [93.2, 4180.0], [93.3, 4180.0], [93.4, 4181.0], [93.5, 4182.0], [93.6, 4183.0], [93.7, 4183.0], [93.8, 4183.0], [93.9, 4183.0], [94.0, 4187.0], [94.1, 4188.0], [94.2, 4189.0], [94.3, 4191.0], [94.4, 4193.0], [94.5, 4195.0], [94.6, 4202.0], [94.7, 4215.0], [94.8, 4216.0], [94.9, 4223.0], [95.0, 4229.0], [95.1, 4234.0], [95.2, 4243.0], [95.3, 4252.0], [95.4, 4253.0], [95.5, 4254.0], [95.6, 4255.0], [95.7, 4257.0], [95.8, 4258.0], [95.9, 4258.0], [96.0, 4259.0], [96.1, 4260.0], [96.2, 4262.0], [96.3, 4262.0], [96.4, 4263.0], [96.5, 4263.0], [96.6, 4264.0], [96.7, 4265.0], [96.8, 4266.0], [96.9, 4267.0], [97.0, 4268.0], [97.1, 4268.0], [97.2, 4269.0], [97.3, 4269.0], [97.4, 4269.0], [97.5, 4270.0], [97.6, 4270.0], [97.7, 4271.0], [97.8, 4271.0], [97.9, 4272.0], [98.0, 4272.0], [98.1, 4272.0], [98.2, 4274.0], [98.3, 4274.0], [98.4, 4275.0], [98.5, 4277.0], [98.6, 4277.0], [98.7, 4280.0], [98.8, 4281.0], [98.9, 4281.0], [99.0, 4282.0], [99.1, 4285.0], [99.2, 4287.0], [99.3, 4287.0], [99.4, 4291.0], [99.5, 4293.0], [99.6, 4294.0], [99.7, 4295.0], [99.8, 4295.0], [99.9, 4343.0], [100.0, 4346.0]], "isOverall": false, "label": "商品列表", "isController": false}, {"data": [[0.0, 205.0], [0.1, 206.0], [0.2, 208.0], [0.3, 209.0], [0.4, 210.0], [0.5, 214.0], [0.6, 280.0], [0.7, 294.0], [0.8, 387.0], [0.9, 393.0], [1.0, 394.0], [1.1, 394.0], [1.2, 396.0], [1.3, 396.0], [1.4, 398.0], [1.5, 399.0], [1.6, 400.0], [1.7, 483.0], [1.8, 487.0], [1.9, 489.0], [2.0, 493.0], [2.1, 493.0], [2.2, 494.0], [2.3, 494.0], [2.4, 495.0], [2.5, 495.0], [2.6, 495.0], [2.7, 496.0], [2.8, 496.0], [2.9, 496.0], [3.0, 497.0], [3.1, 497.0], [3.2, 498.0], [3.3, 499.0], [3.4, 499.0], [3.5, 502.0], [3.6, 546.0], [3.7, 583.0], [3.8, 586.0], [3.9, 586.0], [4.0, 588.0], [4.1, 588.0], [4.2, 590.0], [4.3, 590.0], [4.4, 591.0], [4.5, 591.0], [4.6, 592.0], [4.7, 593.0], [4.8, 593.0], [4.9, 594.0], [5.0, 594.0], [5.1, 594.0], [5.2, 596.0], [5.3, 596.0], [5.4, 596.0], [5.5, 597.0], [5.6, 598.0], [5.7, 598.0], [5.8, 598.0], [5.9, 598.0], [6.0, 600.0], [6.1, 601.0], [6.2, 604.0], [6.3, 605.0], [6.4, 605.0], [6.5, 606.0], [6.6, 606.0], [6.7, 608.0], [6.8, 608.0], [6.9, 610.0], [7.0, 611.0], [7.1, 611.0], [7.2, 624.0], [7.3, 626.0], [7.4, 643.0], [7.5, 648.0], [7.6, 651.0], [7.7, 658.0], [7.8, 660.0], [7.9, 667.0], [8.0, 677.0], [8.1, 679.0], [8.2, 680.0], [8.3, 683.0], [8.4, 684.0], [8.5, 684.0], [8.6, 684.0], [8.7, 685.0], [8.8, 687.0], [8.9, 687.0], [9.0, 689.0], [9.1, 690.0], [9.2, 691.0], [9.3, 692.0], [9.4, 693.0], [9.5, 693.0], [9.6, 694.0], [9.7, 695.0], [9.8, 695.0], [9.9, 697.0], [10.0, 697.0], [10.1, 698.0], [10.2, 698.0], [10.3, 698.0], [10.4, 699.0], [10.5, 700.0], [10.6, 701.0], [10.7, 701.0], [10.8, 701.0], [10.9, 702.0], [11.0, 703.0], [11.1, 703.0], [11.2, 705.0], [11.3, 705.0], [11.4, 719.0], [11.5, 720.0], [11.6, 726.0], [11.7, 740.0], [11.8, 746.0], [11.9, 750.0], [12.0, 756.0], [12.1, 760.0], [12.2, 764.0], [12.3, 764.0], [12.4, 767.0], [12.5, 770.0], [12.6, 773.0], [12.7, 775.0], [12.8, 775.0], [12.9, 780.0], [13.0, 780.0], [13.1, 780.0], [13.2, 781.0], [13.3, 782.0], [13.4, 783.0], [13.5, 783.0], [13.6, 784.0], [13.7, 788.0], [13.8, 788.0], [13.9, 789.0], [14.0, 790.0], [14.1, 790.0], [14.2, 792.0], [14.3, 793.0], [14.4, 794.0], [14.5, 794.0], [14.6, 795.0], [14.7, 795.0], [14.8, 795.0], [14.9, 796.0], [15.0, 796.0], [15.1, 796.0], [15.2, 797.0], [15.3, 798.0], [15.4, 800.0], [15.5, 801.0], [15.6, 802.0], [15.7, 805.0], [15.8, 818.0], [15.9, 821.0], [16.0, 824.0], [16.1, 825.0], [16.2, 825.0], [16.3, 827.0], [16.4, 829.0], [16.5, 831.0], [16.6, 832.0], [16.7, 833.0], [16.8, 836.0], [16.9, 836.0], [17.0, 842.0], [17.1, 842.0], [17.2, 847.0], [17.3, 848.0], [17.4, 851.0], [17.5, 854.0], [17.6, 855.0], [17.7, 855.0], [17.8, 855.0], [17.9, 856.0], [18.0, 858.0], [18.1, 858.0], [18.2, 858.0], [18.3, 859.0], [18.4, 861.0], [18.5, 864.0], [18.6, 865.0], [18.7, 867.0], [18.8, 870.0], [18.9, 871.0], [19.0, 874.0], [19.1, 875.0], [19.2, 875.0], [19.3, 876.0], [19.4, 877.0], [19.5, 878.0], [19.6, 878.0], [19.7, 880.0], [19.8, 880.0], [19.9, 884.0], [20.0, 885.0], [20.1, 886.0], [20.2, 887.0], [20.3, 888.0], [20.4, 890.0], [20.5, 891.0], [20.6, 893.0], [20.7, 893.0], [20.8, 893.0], [20.9, 893.0], [21.0, 894.0], [21.1, 895.0], [21.2, 895.0], [21.3, 895.0], [21.4, 895.0], [21.5, 896.0], [21.6, 896.0], [21.7, 897.0], [21.8, 897.0], [21.9, 899.0], [22.0, 899.0], [22.1, 899.0], [22.2, 900.0], [22.3, 903.0], [22.4, 921.0], [22.5, 922.0], [22.6, 923.0], [22.7, 925.0], [22.8, 925.0], [22.9, 927.0], [23.0, 930.0], [23.1, 932.0], [23.2, 932.0], [23.3, 932.0], [23.4, 933.0], [23.5, 934.0], [23.6, 935.0], [23.7, 936.0], [23.8, 937.0], [23.9, 937.0], [24.0, 938.0], [24.1, 939.0], [24.2, 940.0], [24.3, 941.0], [24.4, 943.0], [24.5, 945.0], [24.6, 945.0], [24.7, 946.0], [24.8, 946.0], [24.9, 947.0], [25.0, 950.0], [25.1, 951.0], [25.2, 952.0], [25.3, 952.0], [25.4, 953.0], [25.5, 955.0], [25.6, 955.0], [25.7, 959.0], [25.8, 960.0], [25.9, 964.0], [26.0, 965.0], [26.1, 966.0], [26.2, 967.0], [26.3, 967.0], [26.4, 969.0], [26.5, 972.0], [26.6, 972.0], [26.7, 979.0], [26.8, 981.0], [26.9, 981.0], [27.0, 982.0], [27.1, 982.0], [27.2, 983.0], [27.3, 983.0], [27.4, 985.0], [27.5, 985.0], [27.6, 986.0], [27.7, 986.0], [27.8, 988.0], [27.9, 989.0], [28.0, 991.0], [28.1, 991.0], [28.2, 994.0], [28.3, 994.0], [28.4, 995.0], [28.5, 996.0], [28.6, 996.0], [28.7, 999.0], [28.8, 1000.0], [28.9, 1002.0], [29.0, 1019.0], [29.1, 1020.0], [29.2, 1025.0], [29.3, 1025.0], [29.4, 1028.0], [29.5, 1029.0], [29.6, 1031.0], [29.7, 1045.0], [29.8, 1045.0], [29.9, 1047.0], [30.0, 1049.0], [30.1, 1050.0], [30.2, 1051.0], [30.3, 1051.0], [30.4, 1051.0], [30.5, 1053.0], [30.6, 1053.0], [30.7, 1054.0], [30.8, 1055.0], [30.9, 1056.0], [31.0, 1057.0], [31.1, 1058.0], [31.2, 1060.0], [31.3, 1060.0], [31.4, 1060.0], [31.5, 1063.0], [31.6, 1063.0], [31.7, 1068.0], [31.8, 1068.0], [31.9, 1071.0], [32.0, 1075.0], [32.1, 1076.0], [32.2, 1077.0], [32.3, 1078.0], [32.4, 1078.0], [32.5, 1080.0], [32.6, 1080.0], [32.7, 1081.0], [32.8, 1082.0], [32.9, 1082.0], [33.0, 1084.0], [33.1, 1084.0], [33.2, 1085.0], [33.3, 1086.0], [33.4, 1087.0], [33.5, 1088.0], [33.6, 1088.0], [33.7, 1089.0], [33.8, 1089.0], [33.9, 1090.0], [34.0, 1090.0], [34.1, 1091.0], [34.2, 1097.0], [34.3, 1102.0], [34.4, 1118.0], [34.5, 1133.0], [34.6, 1133.0], [34.7, 1134.0], [34.8, 1136.0], [34.9, 1137.0], [35.0, 1138.0], [35.1, 1139.0], [35.2, 1144.0], [35.3, 1145.0], [35.4, 1150.0], [35.5, 1152.0], [35.6, 1152.0], [35.7, 1156.0], [35.8, 1158.0], [35.9, 1159.0], [36.0, 1162.0], [36.1, 1163.0], [36.2, 1165.0], [36.3, 1165.0], [36.4, 1167.0], [36.5, 1168.0], [36.6, 1170.0], [36.7, 1174.0], [36.8, 1176.0], [36.9, 1178.0], [37.0, 1179.0], [37.1, 1180.0], [37.2, 1181.0], [37.3, 1182.0], [37.4, 1182.0], [37.5, 1183.0], [37.6, 1186.0], [37.7, 1186.0], [37.8, 1186.0], [37.9, 1189.0], [38.0, 1191.0], [38.1, 1199.0], [38.2, 1220.0], [38.3, 1224.0], [38.4, 1224.0], [38.5, 1229.0], [38.6, 1230.0], [38.7, 1242.0], [38.8, 1242.0], [38.9, 1245.0], [39.0, 1247.0], [39.1, 1248.0], [39.2, 1251.0], [39.3, 1254.0], [39.4, 1256.0], [39.5, 1259.0], [39.6, 1266.0], [39.7, 1270.0], [39.8, 1272.0], [39.9, 1278.0], [40.0, 1279.0], [40.1, 1281.0], [40.2, 1283.0], [40.3, 1284.0], [40.4, 1285.0], [40.5, 1286.0], [40.6, 1286.0], [40.7, 1287.0], [40.8, 1288.0], [40.9, 1288.0], [41.0, 1288.0], [41.1, 1289.0], [41.2, 1290.0], [41.3, 1290.0], [41.4, 1290.0], [41.5, 1291.0], [41.6, 1293.0], [41.7, 1294.0], [41.8, 1295.0], [41.9, 1321.0], [42.0, 1332.0], [42.1, 1333.0], [42.2, 1336.0], [42.3, 1336.0], [42.4, 1348.0], [42.5, 1351.0], [42.6, 1352.0], [42.7, 1355.0], [42.8, 1355.0], [42.9, 1357.0], [43.0, 1357.0], [43.1, 1359.0], [43.2, 1361.0], [43.3, 1361.0], [43.4, 1362.0], [43.5, 1363.0], [43.6, 1364.0], [43.7, 1366.0], [43.8, 1368.0], [43.9, 1370.0], [44.0, 1370.0], [44.1, 1370.0], [44.2, 1371.0], [44.3, 1372.0], [44.4, 1373.0], [44.5, 1374.0], [44.6, 1374.0], [44.7, 1375.0], [44.8, 1376.0], [44.9, 1379.0], [45.0, 1379.0], [45.1, 1380.0], [45.2, 1380.0], [45.3, 1380.0], [45.4, 1381.0], [45.5, 1382.0], [45.6, 1383.0], [45.7, 1383.0], [45.8, 1383.0], [45.9, 1383.0], [46.0, 1384.0], [46.1, 1384.0], [46.2, 1386.0], [46.3, 1386.0], [46.4, 1386.0], [46.5, 1386.0], [46.6, 1386.0], [46.7, 1387.0], [46.8, 1388.0], [46.9, 1389.0], [47.0, 1390.0], [47.1, 1392.0], [47.2, 1393.0], [47.3, 1393.0], [47.4, 1397.0], [47.5, 1400.0], [47.6, 1400.0], [47.7, 1402.0], [47.8, 1404.0], [47.9, 1405.0], [48.0, 1406.0], [48.1, 1406.0], [48.2, 1411.0], [48.3, 1418.0], [48.4, 1422.0], [48.5, 1427.0], [48.6, 1428.0], [48.7, 1428.0], [48.8, 1429.0], [48.9, 1430.0], [49.0, 1431.0], [49.1, 1431.0], [49.2, 1431.0], [49.3, 1431.0], [49.4, 1433.0], [49.5, 1435.0], [49.6, 1437.0], [49.7, 1442.0], [49.8, 1444.0], [49.9, 1444.0], [50.0, 1448.0], [50.1, 1449.0], [50.2, 1449.0], [50.3, 1449.0], [50.4, 1450.0], [50.5, 1451.0], [50.6, 1451.0], [50.7, 1454.0], [50.8, 1454.0], [50.9, 1455.0], [51.0, 1456.0], [51.1, 1458.0], [51.2, 1458.0], [51.3, 1459.0], [51.4, 1460.0], [51.5, 1460.0], [51.6, 1461.0], [51.7, 1462.0], [51.8, 1464.0], [51.9, 1464.0], [52.0, 1465.0], [52.1, 1467.0], [52.2, 1469.0], [52.3, 1470.0], [52.4, 1471.0], [52.5, 1474.0], [52.6, 1478.0], [52.7, 1479.0], [52.8, 1479.0], [52.9, 1480.0], [53.0, 1483.0], [53.1, 1486.0], [53.2, 1491.0], [53.3, 1514.0], [53.4, 1517.0], [53.5, 1522.0], [53.6, 1522.0], [53.7, 1523.0], [53.8, 1524.0], [53.9, 1525.0], [54.0, 1525.0], [54.1, 1525.0], [54.2, 1529.0], [54.3, 1530.0], [54.4, 1533.0], [54.5, 1537.0], [54.6, 1538.0], [54.7, 1540.0], [54.8, 1540.0], [54.9, 1542.0], [55.0, 1543.0], [55.1, 1543.0], [55.2, 1547.0], [55.3, 1547.0], [55.4, 1548.0], [55.5, 1550.0], [55.6, 1550.0], [55.7, 1551.0], [55.8, 1552.0], [55.9, 1553.0], [56.0, 1553.0], [56.1, 1554.0], [56.2, 1555.0], [56.3, 1555.0], [56.4, 1556.0], [56.5, 1557.0], [56.6, 1558.0], [56.7, 1559.0], [56.8, 1559.0], [56.9, 1561.0], [57.0, 1564.0], [57.1, 1564.0], [57.2, 1566.0], [57.3, 1566.0], [57.4, 1567.0], [57.5, 1569.0], [57.6, 1570.0], [57.7, 1571.0], [57.8, 1572.0], [57.9, 1573.0], [58.0, 1575.0], [58.1, 1575.0], [58.2, 1576.0], [58.3, 1577.0], [58.4, 1577.0], [58.5, 1579.0], [58.6, 1582.0], [58.7, 1583.0], [58.8, 1586.0], [58.9, 1616.0], [59.0, 1618.0], [59.1, 1619.0], [59.2, 1621.0], [59.3, 1621.0], [59.4, 1623.0], [59.5, 1625.0], [59.6, 1625.0], [59.7, 1628.0], [59.8, 1628.0], [59.9, 1628.0], [60.0, 1629.0], [60.1, 1630.0], [60.2, 1631.0], [60.3, 1632.0], [60.4, 1636.0], [60.5, 1641.0], [60.6, 1641.0], [60.7, 1643.0], [60.8, 1643.0], [60.9, 1643.0], [61.0, 1644.0], [61.1, 1644.0], [61.2, 1645.0], [61.3, 1646.0], [61.4, 1647.0], [61.5, 1650.0], [61.6, 1652.0], [61.7, 1653.0], [61.8, 1655.0], [61.9, 1657.0], [62.0, 1658.0], [62.1, 1658.0], [62.2, 1658.0], [62.3, 1658.0], [62.4, 1659.0], [62.5, 1660.0], [62.6, 1660.0], [62.7, 1661.0], [62.8, 1661.0], [62.9, 1662.0], [63.0, 1663.0], [63.1, 1663.0], [63.2, 1663.0], [63.3, 1663.0], [63.4, 1663.0], [63.5, 1663.0], [63.6, 1663.0], [63.7, 1664.0], [63.8, 1664.0], [63.9, 1664.0], [64.0, 1665.0], [64.1, 1665.0], [64.2, 1665.0], [64.3, 1666.0], [64.4, 1666.0], [64.5, 1667.0], [64.6, 1668.0], [64.7, 1668.0], [64.8, 1668.0], [64.9, 1669.0], [65.0, 1669.0], [65.1, 1669.0], [65.2, 1670.0], [65.3, 1670.0], [65.4, 1672.0], [65.5, 1672.0], [65.6, 1672.0], [65.7, 1673.0], [65.8, 1673.0], [65.9, 1673.0], [66.0, 1673.0], [66.1, 1674.0], [66.2, 1675.0], [66.3, 1675.0], [66.4, 1675.0], [66.5, 1676.0], [66.6, 1676.0], [66.7, 1677.0], [66.8, 1677.0], [66.9, 1678.0], [67.0, 1679.0], [67.1, 1679.0], [67.2, 1680.0], [67.3, 1680.0], [67.4, 1680.0], [67.5, 1681.0], [67.6, 1681.0], [67.7, 1682.0], [67.8, 1682.0], [67.9, 1683.0], [68.0, 1684.0], [68.1, 1684.0], [68.2, 1687.0], [68.3, 1687.0], [68.4, 1689.0], [68.5, 1690.0], [68.6, 1691.0], [68.7, 1709.0], [68.8, 1711.0], [68.9, 1714.0], [69.0, 1717.0], [69.1, 1717.0], [69.2, 1717.0], [69.3, 1718.0], [69.4, 1723.0], [69.5, 1724.0], [69.6, 1728.0], [69.7, 1730.0], [69.8, 1730.0], [69.9, 1732.0], [70.0, 1736.0], [70.1, 1740.0], [70.2, 1747.0], [70.3, 1747.0], [70.4, 1748.0], [70.5, 1749.0], [70.6, 1750.0], [70.7, 1751.0], [70.8, 1751.0], [70.9, 1752.0], [71.0, 1755.0], [71.1, 1756.0], [71.2, 1757.0], [71.3, 1757.0], [71.4, 1758.0], [71.5, 1758.0], [71.6, 1760.0], [71.7, 1763.0], [71.8, 1764.0], [71.9, 1766.0], [72.0, 1766.0], [72.1, 1767.0], [72.2, 1768.0], [72.3, 1768.0], [72.4, 1768.0], [72.5, 1769.0], [72.6, 1770.0], [72.7, 1772.0], [72.8, 1772.0], [72.9, 1776.0], [73.0, 1777.0], [73.1, 1777.0], [73.2, 1779.0], [73.3, 1780.0], [73.4, 1782.0], [73.5, 1787.0], [73.6, 1787.0], [73.7, 1792.0], [73.8, 1793.0], [73.9, 1794.0], [74.0, 1801.0], [74.1, 1802.0], [74.2, 1804.0], [74.3, 1806.0], [74.4, 1808.0], [74.5, 1808.0], [74.6, 1808.0], [74.7, 1817.0], [74.8, 1817.0], [74.9, 1824.0], [75.0, 1837.0], [75.1, 1840.0], [75.2, 1844.0], [75.3, 1844.0], [75.4, 1845.0], [75.5, 1849.0], [75.6, 1851.0], [75.7, 1854.0], [75.8, 1855.0], [75.9, 1856.0], [76.0, 1858.0], [76.1, 1858.0], [76.2, 1858.0], [76.3, 1858.0], [76.4, 1859.0], [76.5, 1859.0], [76.6, 1860.0], [76.7, 1860.0], [76.8, 1861.0], [76.9, 1862.0], [77.0, 1863.0], [77.1, 1864.0], [77.2, 1864.0], [77.3, 1865.0], [77.4, 1866.0], [77.5, 1867.0], [77.6, 1868.0], [77.7, 1868.0], [77.8, 1868.0], [77.9, 1869.0], [78.0, 1872.0], [78.1, 1872.0], [78.2, 1873.0], [78.3, 1874.0], [78.4, 1875.0], [78.5, 1876.0], [78.6, 1876.0], [78.7, 1877.0], [78.8, 1878.0], [78.9, 1881.0], [79.0, 1882.0], [79.1, 1882.0], [79.2, 1883.0], [79.3, 1883.0], [79.4, 1885.0], [79.5, 1889.0], [79.6, 1889.0], [79.7, 1893.0], [79.8, 1894.0], [79.9, 1897.0], [80.0, 1900.0], [80.1, 1900.0], [80.2, 1904.0], [80.3, 1915.0], [80.4, 1922.0], [80.5, 1924.0], [80.6, 1925.0], [80.7, 1925.0], [80.8, 1926.0], [80.9, 1928.0], [81.0, 1934.0], [81.1, 1942.0], [81.2, 1943.0], [81.3, 1944.0], [81.4, 1945.0], [81.5, 1949.0], [81.6, 1952.0], [81.7, 1953.0], [81.8, 1954.0], [81.9, 1955.0], [82.0, 1956.0], [82.1, 1956.0], [82.2, 1957.0], [82.3, 1958.0], [82.4, 1959.0], [82.5, 1959.0], [82.6, 1961.0], [82.7, 1962.0], [82.8, 1963.0], [82.9, 1966.0], [83.0, 1968.0], [83.1, 1969.0], [83.2, 1971.0], [83.3, 1972.0], [83.4, 1973.0], [83.5, 1974.0], [83.6, 1975.0], [83.7, 1975.0], [83.8, 1978.0], [83.9, 1978.0], [84.0, 1980.0], [84.1, 1980.0], [84.2, 1981.0], [84.3, 1981.0], [84.4, 1981.0], [84.5, 1982.0], [84.6, 1982.0], [84.7, 1984.0], [84.8, 1984.0], [84.9, 1990.0], [85.0, 1991.0], [85.1, 1992.0], [85.2, 1993.0], [85.3, 1996.0], [85.4, 1997.0], [85.5, 1997.0], [85.6, 1998.0], [85.7, 2000.0], [85.8, 2001.0], [85.9, 2002.0], [86.0, 2003.0], [86.1, 2003.0], [86.2, 2004.0], [86.3, 2005.0], [86.4, 2005.0], [86.5, 2006.0], [86.6, 2006.0], [86.7, 2007.0], [86.8, 2007.0], [86.9, 2008.0], [87.0, 2013.0], [87.1, 2015.0], [87.2, 2021.0], [87.3, 2024.0], [87.4, 2026.0], [87.5, 2026.0], [87.6, 2028.0], [87.7, 2032.0], [87.8, 2037.0], [87.9, 2039.0], [88.0, 2041.0], [88.1, 2041.0], [88.2, 2041.0], [88.3, 2042.0], [88.4, 2045.0], [88.5, 2049.0], [88.6, 2051.0], [88.7, 2052.0], [88.8, 2052.0], [88.9, 2055.0], [89.0, 2056.0], [89.1, 2057.0], [89.2, 2060.0], [89.3, 2060.0], [89.4, 2064.0], [89.5, 2064.0], [89.6, 2065.0], [89.7, 2067.0], [89.8, 2067.0], [89.9, 2070.0], [90.0, 2071.0], [90.1, 2072.0], [90.2, 2073.0], [90.3, 2073.0], [90.4, 2074.0], [90.5, 2075.0], [90.6, 2075.0], [90.7, 2077.0], [90.8, 2078.0], [90.9, 2080.0], [91.0, 2081.0], [91.1, 2081.0], [91.2, 2084.0], [91.3, 2085.0], [91.4, 2085.0], [91.5, 2086.0], [91.6, 2086.0], [91.7, 2091.0], [91.8, 2094.0], [91.9, 2101.0], [92.0, 2102.0], [92.1, 2107.0], [92.2, 2122.0], [92.3, 2133.0], [92.4, 2145.0], [92.5, 2147.0], [92.6, 2155.0], [92.7, 2160.0], [92.8, 2161.0], [92.9, 2166.0], [93.0, 2169.0], [93.1, 2169.0], [93.2, 2177.0], [93.3, 2178.0], [93.4, 2187.0], [93.5, 2193.0], [93.6, 2195.0], [93.7, 2197.0], [93.8, 2197.0], [93.9, 2198.0], [94.0, 2199.0], [94.1, 2199.0], [94.2, 2201.0], [94.3, 2202.0], [94.4, 2208.0], [94.5, 2217.0], [94.6, 2220.0], [94.7, 2222.0], [94.8, 2223.0], [94.9, 2226.0], [95.0, 2228.0], [95.1, 2229.0], [95.2, 2232.0], [95.3, 2234.0], [95.4, 2237.0], [95.5, 2242.0], [95.6, 2250.0], [95.7, 2254.0], [95.8, 2258.0], [95.9, 2259.0], [96.0, 2264.0], [96.1, 2264.0], [96.2, 2266.0], [96.3, 2272.0], [96.4, 2277.0], [96.5, 2280.0], [96.6, 2284.0], [96.7, 2304.0], [96.8, 2306.0], [96.9, 2326.0], [97.0, 2334.0], [97.1, 2335.0], [97.2, 2338.0], [97.3, 2339.0], [97.4, 2348.0], [97.5, 2366.0], [97.6, 2369.0], [97.7, 2376.0], [97.8, 2378.0], [97.9, 2379.0], [98.0, 2382.0], [98.1, 2385.0], [98.2, 2387.0], [98.3, 2388.0], [98.4, 2393.0], [98.5, 2433.0], [98.6, 2439.0], [98.7, 2460.0], [98.8, 2461.0], [98.9, 2510.0], [99.0, 2527.0], [99.1, 2537.0], [99.2, 2540.0], [99.3, 2541.0], [99.4, 2548.0], [99.5, 2619.0], [99.6, 2624.0], [99.7, 2637.0], [99.8, 2637.0], [99.9, 2639.0]], "isOverall": false, "label": "商品详情", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 2.0, "minX": 200.0, "maxY": 272.0, "series": [{"data": [[1000.0, 3.0], [1100.0, 6.0], [1200.0, 33.0], [1300.0, 10.0], [1400.0, 4.0], [1600.0, 2.0], [2000.0, 5.0], [2300.0, 12.0], [2200.0, 14.0], [2400.0, 45.0], [2500.0, 10.0], [2600.0, 17.0], [2800.0, 93.0], [2700.0, 49.0], [2900.0, 87.0], [3000.0, 76.0], [3100.0, 64.0], [3200.0, 101.0], [3300.0, 81.0], [3400.0, 43.0], [3500.0, 124.0], [3600.0, 272.0], [3700.0, 214.0], [3800.0, 76.0], [3900.0, 35.0], [4000.0, 38.0], [4200.0, 87.0], [4100.0, 52.0], [4300.0, 3.0]], "isOverall": false, "label": "商品列表", "isController": false}, {"data": [[600.0, 72.0], [700.0, 78.0], [800.0, 108.0], [900.0, 106.0], [1000.0, 88.0], [1100.0, 62.0], [1200.0, 60.0], [1300.0, 90.0], [1400.0, 92.0], [1500.0, 89.0], [1600.0, 157.0], [1700.0, 86.0], [1800.0, 96.0], [1900.0, 91.0], [2000.0, 99.0], [2100.0, 36.0], [2200.0, 41.0], [2300.0, 28.0], [2400.0, 7.0], [2500.0, 9.0], [2600.0, 9.0], [200.0, 12.0], [300.0, 13.0], [400.0, 30.0], [500.0, 41.0]], "isOverall": false, "label": "商品详情", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 4300.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 55.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 2348.0, "series": [{"data": [[0.0, 55.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 853.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 2348.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 194.01965601965608, "minX": 1.74910332E12, "maxY": 194.01965601965608, "series": [{"data": [[1.74910332E12, 194.01965601965608]], "isOverall": false, "label": "线程组", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.74910332E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 1096.0, "minX": 1.0, "maxY": 3456.721250000001, "series": [{"data": [[33.0, 1274.3333333333333], [2.0, 1458.0], [35.0, 1282.0], [34.0, 1281.0], [37.0, 1268.0], [36.0, 1270.0], [39.0, 1264.0], [43.0, 1283.0], [42.0, 1274.3333333333333], [45.0, 1262.5], [46.0, 1190.0], [51.0, 1192.0], [50.0, 1207.0], [53.0, 1172.5], [55.0, 1097.0], [56.0, 1096.0], [4.0, 1459.5], [6.0, 1372.0], [7.0, 1375.0], [9.0, 1382.0], [11.0, 1369.0], [200.0, 3456.721250000001], [13.0, 1371.0], [1.0, 1469.0], [17.0, 1280.0], [19.0, 1276.0], [21.0, 1277.0], [22.0, 1277.0], [23.0, 1286.3333333333333], [24.0, 1279.5], [27.0, 1281.3333333333333], [29.0, 1283.5], [30.0, 1280.0]], "isOverall": false, "label": "商品列表", "isController": false}, {"data": [[194.23309178743958, 3383.2228260869574]], "isOverall": false, "label": "商品列表-Aggregated", "isController": false}, {"data": [[60.0, 2085.3333333333335], [62.0, 2083.6666666666665], [67.0, 2062.0], [64.0, 2085.0], [71.0, 2081.0], [70.0, 2078.0], [69.0, 2071.6666666666665], [68.0, 2083.0], [75.0, 2080.0], [79.0, 2062.6666666666665], [77.0, 2065.0], [76.0, 2074.0], [83.0, 1988.5], [80.0, 2070.0], [86.0, 1991.5], [84.0, 1986.5], [90.0, 1974.5], [89.0, 1980.0], [94.0, 1976.0], [92.0, 1977.0], [107.0, 1878.0], [106.0, 1869.0], [105.0, 1868.0], [104.0, 1875.5], [111.0, 1867.0], [109.0, 1862.5], [108.0, 1861.0], [115.0, 1665.0], [114.0, 1763.0], [112.0, 1769.0], [119.0, 1668.0], [118.0, 1687.0], [122.0, 1671.5], [121.0, 1676.0], [120.0, 1674.0], [127.0, 1661.0], [126.0, 1670.25], [134.0, 1577.0], [133.0, 1661.75], [129.0, 1667.5], [143.0, 1474.0], [140.0, 1559.0], [139.0, 1579.0], [138.0, 1564.0], [137.0, 1571.5], [136.0, 1573.0], [146.0, 1469.0], [145.0, 1474.25], [159.0, 1392.0], [158.0, 1396.0], [157.0, 1389.0], [156.0, 1393.0], [154.0, 1398.0], [167.0, 1393.0], [165.0, 1393.25], [164.0, 1406.0], [163.0, 1391.0], [161.0, 1383.0], [160.0, 1406.0], [173.0, 1393.0], [171.0, 1404.0], [170.0, 1404.0], [168.0, 1405.0], [183.0, 1377.25], [191.0, 1362.0], [190.0, 1377.75], [188.0, 1366.5], [187.0, 1384.5], [184.0, 1375.3333333333333], [197.0, 1372.0], [196.0, 1368.0], [195.0, 1370.0], [194.0, 1375.0], [200.0, 1383.312542837561]], "isOverall": false, "label": "商品详情", "isController": false}, {"data": [[193.79812499999997, 1409.4362500000007]], "isOverall": false, "label": "商品详情-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 200.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 18062.4, "minX": 1.74910332E12, "maxY": 511406.2166666667, "series": [{"data": [[1.74910332E12, 511406.2166666667]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.74910332E12, 18062.4]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.74910332E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 1409.4362500000007, "minX": 1.74910332E12, "maxY": 3383.2228260869574, "series": [{"data": [[1.74910332E12, 3383.2228260869574]], "isOverall": false, "label": "商品列表", "isController": false}, {"data": [[1.74910332E12, 1409.4362500000007]], "isOverall": false, "label": "商品详情", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.74910332E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 1375.9856249999996, "minX": 1.74910332E12, "maxY": 3284.676932367151, "series": [{"data": [[1.74910332E12, 3284.676932367151]], "isOverall": false, "label": "商品列表", "isController": false}, {"data": [[1.74910332E12, 1375.9856249999996]], "isOverall": false, "label": "商品详情", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.74910332E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.74910332E12, "maxY": 5.0271739130434785, "series": [{"data": [[1.74910332E12, 5.0271739130434785]], "isOverall": false, "label": "商品列表", "isController": false}, {"data": [[1.74910332E12, 0.0]], "isOverall": false, "label": "商品详情", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.74910332E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 205.0, "minX": 1.74910332E12, "maxY": 4346.0, "series": [{"data": [[1.74910332E12, 4346.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.74910332E12, 3788.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.74910332E12, 4272.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.74910332E12, 4070.449999999999]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.74910332E12, 205.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.74910332E12, 2305.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.74910332E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 681.5, "minX": 3.0, "maxY": 4175.5, "series": [{"data": [[43.0, 2493.0], [47.0, 770.0], [3.0, 2506.0], [54.0, 2888.0], [55.0, 2264.0], [56.0, 796.0], [58.0, 681.5], [67.0, 2264.0], [77.0, 1664.0], [81.0, 2952.0], [80.0, 898.5], [87.0, 1052.0], [89.0, 896.0], [91.0, 1770.0], [99.0, 981.0], [98.0, 1661.0], [96.0, 3666.0], [101.0, 2805.0], [107.0, 1801.0], [111.0, 1469.0], [7.0, 2220.0], [113.0, 1749.0], [114.0, 1387.5], [117.0, 1450.0], [123.0, 3610.0], [128.0, 3291.0], [146.0, 3776.0], [157.0, 3292.0], [170.0, 3698.0], [11.0, 2857.0], [182.0, 4175.5], [178.0, 3995.5], [19.0, 2828.0], [20.0, 2307.0], [27.0, 1943.0], [28.0, 2903.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 182.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 676.0, "minX": 3.0, "maxY": 3912.5, "series": [{"data": [[43.0, 2491.0], [47.0, 770.0], [3.0, 2505.0], [54.0, 2887.5], [55.0, 2263.0], [56.0, 728.0], [58.0, 676.0], [67.0, 2264.0], [77.0, 1664.0], [81.0, 2950.0], [80.0, 894.0], [87.0, 1051.0], [89.0, 831.0], [91.0, 1767.0], [99.0, 890.0], [98.0, 1661.0], [96.0, 3462.0], [101.0, 2799.0], [107.0, 1801.0], [111.0, 1458.0], [7.0, 2219.0], [113.0, 1749.0], [114.0, 1159.5], [117.0, 1450.0], [123.0, 3519.0], [128.0, 3127.5], [146.0, 3567.5], [157.0, 3196.0], [170.0, 3565.0], [11.0, 2857.0], [182.0, 3912.5], [178.0, 3790.0], [19.0, 2828.0], [20.0, 2300.0], [27.0, 1943.0], [28.0, 2801.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 182.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 54.266666666666666, "minX": 1.74910332E12, "maxY": 54.266666666666666, "series": [{"data": [[1.74910332E12, 54.266666666666666]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.74910332E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 54.266666666666666, "minX": 1.74910332E12, "maxY": 54.266666666666666, "series": [{"data": [[1.74910332E12, 54.266666666666666]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.74910332E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 26.666666666666668, "minX": 1.74910332E12, "maxY": 27.6, "series": [{"data": [[1.74910332E12, 27.6]], "isOverall": false, "label": "商品列表-success", "isController": false}, {"data": [[1.74910332E12, 26.666666666666668]], "isOverall": false, "label": "商品详情-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.74910332E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 54.266666666666666, "minX": 1.74910332E12, "maxY": 54.266666666666666, "series": [{"data": [[1.74910332E12, 54.266666666666666]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.74910332E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

