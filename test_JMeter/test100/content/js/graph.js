/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 206.0, "minX": 0.0, "maxY": 4226.0, "series": [{"data": [[0.0, 302.0], [0.1, 303.0], [0.2, 303.0], [0.3, 390.0], [0.4, 393.0], [0.5, 407.0], [0.6, 407.0], [0.7, 407.0], [0.8, 408.0], [0.9, 409.0], [1.0, 479.0], [1.1, 481.0], [1.2, 481.0], [1.3, 904.0], [1.4, 906.0], [1.5, 994.0], [1.6, 996.0], [1.7, 998.0], [1.8, 1005.0], [1.9, 1089.0], [2.0, 1106.0], [2.1, 1111.0], [2.2, 1112.0], [2.3, 1112.0], [2.4, 1116.0], [2.5, 1119.0], [2.6, 1119.0], [2.7, 1120.0], [2.8, 1127.0], [2.9, 1141.0], [3.0, 1179.0], [3.1, 1187.0], [3.2, 1187.0], [3.3, 1190.0], [3.4, 1191.0], [3.5, 1195.0], [3.6, 1196.0], [3.7, 1198.0], [3.8, 1203.0], [3.9, 1204.0], [4.0, 1208.0], [4.1, 1214.0], [4.2, 1215.0], [4.3, 1216.0], [4.4, 1216.0], [4.5, 1280.0], [4.6, 1282.0], [4.7, 1283.0], [4.8, 1284.0], [4.9, 1286.0], [5.0, 1286.0], [5.1, 1289.0], [5.2, 1290.0], [5.3, 1294.0], [5.4, 1296.0], [5.5, 1298.0], [5.6, 1301.0], [5.7, 1303.0], [5.8, 1306.0], [5.9, 1306.0], [6.0, 1307.0], [6.1, 1307.0], [6.2, 1307.0], [6.3, 1308.0], [6.4, 1308.0], [6.5, 1309.0], [6.6, 1378.0], [6.7, 1383.0], [6.8, 1390.0], [6.9, 1390.0], [7.0, 1390.0], [7.1, 1390.0], [7.2, 1390.0], [7.3, 1391.0], [7.4, 1391.0], [7.5, 1392.0], [7.6, 1393.0], [7.7, 1396.0], [7.8, 1398.0], [7.9, 1401.0], [8.0, 1409.0], [8.1, 1409.0], [8.2, 1410.0], [8.3, 1413.0], [8.4, 1413.0], [8.5, 1415.0], [8.6, 1415.0], [8.7, 1416.0], [8.8, 1417.0], [8.9, 1419.0], [9.0, 1422.0], [9.1, 1422.0], [9.2, 1426.0], [9.3, 1428.0], [9.4, 1428.0], [9.5, 1429.0], [9.6, 1429.0], [9.7, 1429.0], [9.8, 1468.0], [9.9, 1468.0], [10.0, 1470.0], [10.1, 1471.0], [10.2, 1472.0], [10.3, 1474.0], [10.4, 1475.0], [10.5, 1478.0], [10.6, 1479.0], [10.7, 1480.0], [10.8, 1482.0], [10.9, 1483.0], [11.0, 1485.0], [11.1, 1486.0], [11.2, 1486.0], [11.3, 1487.0], [11.4, 1488.0], [11.5, 1489.0], [11.6, 1490.0], [11.7, 1490.0], [11.8, 1492.0], [11.9, 1492.0], [12.0, 1493.0], [12.1, 1493.0], [12.2, 1494.0], [12.3, 1495.0], [12.4, 1495.0], [12.5, 1496.0], [12.6, 1497.0], [12.7, 1497.0], [12.8, 1497.0], [12.9, 1498.0], [13.0, 1498.0], [13.1, 1498.0], [13.2, 1499.0], [13.3, 1500.0], [13.4, 1501.0], [13.5, 1503.0], [13.6, 1503.0], [13.7, 1508.0], [13.8, 1513.0], [13.9, 1514.0], [14.0, 1517.0], [14.1, 1518.0], [14.2, 1519.0], [14.3, 1568.0], [14.4, 1570.0], [14.5, 1571.0], [14.6, 1573.0], [14.7, 1573.0], [14.8, 1580.0], [14.9, 1580.0], [15.0, 1582.0], [15.1, 1582.0], [15.2, 1583.0], [15.3, 1585.0], [15.4, 1585.0], [15.5, 1585.0], [15.6, 1585.0], [15.7, 1585.0], [15.8, 1586.0], [15.9, 1586.0], [16.0, 1587.0], [16.1, 1587.0], [16.2, 1588.0], [16.3, 1589.0], [16.4, 1589.0], [16.5, 1589.0], [16.6, 1590.0], [16.7, 1590.0], [16.8, 1592.0], [16.9, 1593.0], [17.0, 1598.0], [17.1, 1599.0], [17.2, 1599.0], [17.3, 1599.0], [17.4, 1600.0], [17.5, 1601.0], [17.6, 1601.0], [17.7, 1601.0], [17.8, 1602.0], [17.9, 1603.0], [18.0, 1603.0], [18.1, 1603.0], [18.2, 1603.0], [18.3, 1604.0], [18.4, 1605.0], [18.5, 1606.0], [18.6, 1606.0], [18.7, 1606.0], [18.8, 1608.0], [18.9, 1609.0], [19.0, 1610.0], [19.1, 1611.0], [19.2, 1611.0], [19.3, 1613.0], [19.4, 1613.0], [19.5, 1614.0], [19.6, 1614.0], [19.7, 1614.0], [19.8, 1616.0], [19.9, 1616.0], [20.0, 1620.0], [20.1, 1621.0], [20.2, 1663.0], [20.3, 1665.0], [20.4, 1665.0], [20.5, 1667.0], [20.6, 1668.0], [20.7, 1669.0], [20.8, 1671.0], [20.9, 1672.0], [21.0, 1672.0], [21.1, 1672.0], [21.2, 1673.0], [21.3, 1679.0], [21.4, 1679.0], [21.5, 1679.0], [21.6, 1680.0], [21.7, 1680.0], [21.8, 1681.0], [21.9, 1681.0], [22.0, 1681.0], [22.1, 1682.0], [22.2, 1682.0], [22.3, 1683.0], [22.4, 1683.0], [22.5, 1683.0], [22.6, 1685.0], [22.7, 1686.0], [22.8, 1686.0], [22.9, 1686.0], [23.0, 1687.0], [23.1, 1687.0], [23.2, 1687.0], [23.3, 1688.0], [23.4, 1688.0], [23.5, 1688.0], [23.6, 1689.0], [23.7, 1689.0], [23.8, 1690.0], [23.9, 1691.0], [24.0, 1691.0], [24.1, 1691.0], [24.2, 1691.0], [24.3, 1693.0], [24.4, 1693.0], [24.5, 1695.0], [24.6, 1695.0], [24.7, 1695.0], [24.8, 1696.0], [24.9, 1696.0], [25.0, 1696.0], [25.1, 1697.0], [25.2, 1697.0], [25.3, 1698.0], [25.4, 1698.0], [25.5, 1698.0], [25.6, 1698.0], [25.7, 1698.0], [25.8, 1698.0], [25.9, 1699.0], [26.0, 1699.0], [26.1, 1699.0], [26.2, 1699.0], [26.3, 1699.0], [26.4, 1700.0], [26.5, 1700.0], [26.6, 1700.0], [26.7, 1700.0], [26.8, 1701.0], [26.9, 1701.0], [27.0, 1701.0], [27.1, 1701.0], [27.2, 1702.0], [27.3, 1702.0], [27.4, 1702.0], [27.5, 1702.0], [27.6, 1702.0], [27.7, 1703.0], [27.8, 1703.0], [27.9, 1703.0], [28.0, 1703.0], [28.1, 1704.0], [28.2, 1704.0], [28.3, 1705.0], [28.4, 1705.0], [28.5, 1705.0], [28.6, 1706.0], [28.7, 1706.0], [28.8, 1706.0], [28.9, 1707.0], [29.0, 1707.0], [29.1, 1707.0], [29.2, 1707.0], [29.3, 1708.0], [29.4, 1708.0], [29.5, 1708.0], [29.6, 1709.0], [29.7, 1709.0], [29.8, 1710.0], [29.9, 1710.0], [30.0, 1710.0], [30.1, 1711.0], [30.2, 1711.0], [30.3, 1714.0], [30.4, 1714.0], [30.5, 1715.0], [30.6, 1715.0], [30.7, 1715.0], [30.8, 1715.0], [30.9, 1716.0], [31.0, 1718.0], [31.1, 1720.0], [31.2, 1722.0], [31.3, 1724.0], [31.4, 1724.0], [31.5, 1724.0], [31.6, 1726.0], [31.7, 1726.0], [31.8, 1728.0], [31.9, 1728.0], [32.0, 1761.0], [32.1, 1770.0], [32.2, 1773.0], [32.3, 1774.0], [32.4, 1776.0], [32.5, 1776.0], [32.6, 1780.0], [32.7, 1781.0], [32.8, 1786.0], [32.9, 1786.0], [33.0, 1787.0], [33.1, 1788.0], [33.2, 1788.0], [33.3, 1789.0], [33.4, 1789.0], [33.5, 1789.0], [33.6, 1790.0], [33.7, 1790.0], [33.8, 1791.0], [33.9, 1791.0], [34.0, 1791.0], [34.1, 1791.0], [34.2, 1791.0], [34.3, 1792.0], [34.4, 1792.0], [34.5, 1792.0], [34.6, 1794.0], [34.7, 1794.0], [34.8, 1794.0], [34.9, 1795.0], [35.0, 1795.0], [35.1, 1795.0], [35.2, 1795.0], [35.3, 1795.0], [35.4, 1795.0], [35.5, 1797.0], [35.6, 1797.0], [35.7, 1797.0], [35.8, 1797.0], [35.9, 1797.0], [36.0, 1797.0], [36.1, 1798.0], [36.2, 1798.0], [36.3, 1798.0], [36.4, 1798.0], [36.5, 1798.0], [36.6, 1798.0], [36.7, 1798.0], [36.8, 1799.0], [36.9, 1800.0], [37.0, 1800.0], [37.1, 1800.0], [37.2, 1801.0], [37.3, 1803.0], [37.4, 1803.0], [37.5, 1804.0], [37.6, 1805.0], [37.7, 1808.0], [37.8, 1809.0], [37.9, 1809.0], [38.0, 1810.0], [38.1, 1810.0], [38.2, 1810.0], [38.3, 1810.0], [38.4, 1810.0], [38.5, 1811.0], [38.6, 1811.0], [38.7, 1812.0], [38.8, 1857.0], [38.9, 1864.0], [39.0, 1865.0], [39.1, 1873.0], [39.2, 1874.0], [39.3, 1876.0], [39.4, 1878.0], [39.5, 1879.0], [39.6, 1882.0], [39.7, 1885.0], [39.8, 1886.0], [39.9, 1886.0], [40.0, 1887.0], [40.1, 1888.0], [40.2, 1889.0], [40.3, 1889.0], [40.4, 1890.0], [40.5, 1890.0], [40.6, 1890.0], [40.7, 1891.0], [40.8, 1891.0], [40.9, 1891.0], [41.0, 1892.0], [41.1, 1893.0], [41.2, 1893.0], [41.3, 1894.0], [41.4, 1894.0], [41.5, 1895.0], [41.6, 1895.0], [41.7, 1896.0], [41.8, 1896.0], [41.9, 1896.0], [42.0, 1896.0], [42.1, 1896.0], [42.2, 1896.0], [42.3, 1897.0], [42.4, 1897.0], [42.5, 1897.0], [42.6, 1898.0], [42.7, 1898.0], [42.8, 1898.0], [42.9, 1899.0], [43.0, 1900.0], [43.1, 1900.0], [43.2, 1901.0], [43.3, 1901.0], [43.4, 1902.0], [43.5, 1902.0], [43.6, 1902.0], [43.7, 1902.0], [43.8, 1903.0], [43.9, 1903.0], [44.0, 1904.0], [44.1, 1904.0], [44.2, 1904.0], [44.3, 1904.0], [44.4, 1905.0], [44.5, 1906.0], [44.6, 1906.0], [44.7, 1907.0], [44.8, 1908.0], [44.9, 1908.0], [45.0, 1913.0], [45.1, 1915.0], [45.2, 1915.0], [45.3, 1916.0], [45.4, 1918.0], [45.5, 1919.0], [45.6, 1919.0], [45.7, 1959.0], [45.8, 1973.0], [45.9, 1976.0], [46.0, 1980.0], [46.1, 1980.0], [46.2, 1980.0], [46.3, 1985.0], [46.4, 1986.0], [46.5, 1986.0], [46.6, 1986.0], [46.7, 1986.0], [46.8, 1987.0], [46.9, 1987.0], [47.0, 1987.0], [47.1, 1987.0], [47.2, 1987.0], [47.3, 1987.0], [47.4, 1988.0], [47.5, 1989.0], [47.6, 1990.0], [47.7, 1990.0], [47.8, 1992.0], [47.9, 1992.0], [48.0, 1993.0], [48.1, 1994.0], [48.2, 1995.0], [48.3, 1996.0], [48.4, 1998.0], [48.5, 1999.0], [48.6, 2000.0], [48.7, 2003.0], [48.8, 2010.0], [48.9, 2058.0], [49.0, 2064.0], [49.1, 2066.0], [49.2, 2066.0], [49.3, 2069.0], [49.4, 2070.0], [49.5, 2071.0], [49.6, 2072.0], [49.7, 2072.0], [49.8, 2074.0], [49.9, 2075.0], [50.0, 2075.0], [50.1, 2075.0], [50.2, 2076.0], [50.3, 2077.0], [50.4, 2077.0], [50.5, 2078.0], [50.6, 2078.0], [50.7, 2078.0], [50.8, 2079.0], [50.9, 2080.0], [51.0, 2081.0], [51.1, 2082.0], [51.2, 2082.0], [51.3, 2082.0], [51.4, 2083.0], [51.5, 2083.0], [51.6, 2083.0], [51.7, 2083.0], [51.8, 2084.0], [51.9, 2084.0], [52.0, 2085.0], [52.1, 2085.0], [52.2, 2085.0], [52.3, 2086.0], [52.4, 2086.0], [52.5, 2087.0], [52.6, 2087.0], [52.7, 2087.0], [52.8, 2087.0], [52.9, 2088.0], [53.0, 2088.0], [53.1, 2088.0], [53.2, 2089.0], [53.3, 2089.0], [53.4, 2090.0], [53.5, 2090.0], [53.6, 2090.0], [53.7, 2090.0], [53.8, 2090.0], [53.9, 2090.0], [54.0, 2090.0], [54.1, 2091.0], [54.2, 2091.0], [54.3, 2091.0], [54.4, 2091.0], [54.5, 2091.0], [54.6, 2091.0], [54.7, 2091.0], [54.8, 2092.0], [54.9, 2092.0], [55.0, 2093.0], [55.1, 2094.0], [55.2, 2094.0], [55.3, 2094.0], [55.4, 2094.0], [55.5, 2094.0], [55.6, 2095.0], [55.7, 2095.0], [55.8, 2095.0], [55.9, 2095.0], [56.0, 2095.0], [56.1, 2096.0], [56.2, 2096.0], [56.3, 2096.0], [56.4, 2096.0], [56.5, 2096.0], [56.6, 2097.0], [56.7, 2097.0], [56.8, 2097.0], [56.9, 2097.0], [57.0, 2097.0], [57.1, 2098.0], [57.2, 2098.0], [57.3, 2098.0], [57.4, 2098.0], [57.5, 2098.0], [57.6, 2098.0], [57.7, 2098.0], [57.8, 2098.0], [57.9, 2098.0], [58.0, 2099.0], [58.1, 2099.0], [58.2, 2099.0], [58.3, 2099.0], [58.4, 2099.0], [58.5, 2099.0], [58.6, 2100.0], [58.7, 2100.0], [58.8, 2100.0], [58.9, 2100.0], [59.0, 2100.0], [59.1, 2100.0], [59.2, 2101.0], [59.3, 2101.0], [59.4, 2101.0], [59.5, 2103.0], [59.6, 2103.0], [59.7, 2103.0], [59.8, 2103.0], [59.9, 2103.0], [60.0, 2104.0], [60.1, 2104.0], [60.2, 2104.0], [60.3, 2104.0], [60.4, 2105.0], [60.5, 2105.0], [60.6, 2105.0], [60.7, 2105.0], [60.8, 2106.0], [60.9, 2106.0], [61.0, 2107.0], [61.1, 2107.0], [61.2, 2107.0], [61.3, 2107.0], [61.4, 2107.0], [61.5, 2107.0], [61.6, 2108.0], [61.7, 2108.0], [61.8, 2108.0], [61.9, 2108.0], [62.0, 2108.0], [62.1, 2108.0], [62.2, 2108.0], [62.3, 2109.0], [62.4, 2109.0], [62.5, 2109.0], [62.6, 2109.0], [62.7, 2109.0], [62.8, 2110.0], [62.9, 2110.0], [63.0, 2111.0], [63.1, 2112.0], [63.2, 2112.0], [63.3, 2115.0], [63.4, 2116.0], [63.5, 2116.0], [63.6, 2171.0], [63.7, 2172.0], [63.8, 2173.0], [63.9, 2173.0], [64.0, 2175.0], [64.1, 2175.0], [64.2, 2175.0], [64.3, 2176.0], [64.4, 2177.0], [64.5, 2177.0], [64.6, 2177.0], [64.7, 2178.0], [64.8, 2179.0], [64.9, 2180.0], [65.0, 2181.0], [65.1, 2182.0], [65.2, 2182.0], [65.3, 2182.0], [65.4, 2182.0], [65.5, 2183.0], [65.6, 2185.0], [65.7, 2185.0], [65.8, 2186.0], [65.9, 2186.0], [66.0, 2186.0], [66.1, 2186.0], [66.2, 2187.0], [66.3, 2188.0], [66.4, 2188.0], [66.5, 2188.0], [66.6, 2189.0], [66.7, 2189.0], [66.8, 2189.0], [66.9, 2190.0], [67.0, 2191.0], [67.1, 2192.0], [67.2, 2192.0], [67.3, 2193.0], [67.4, 2193.0], [67.5, 2193.0], [67.6, 2194.0], [67.7, 2194.0], [67.8, 2195.0], [67.9, 2195.0], [68.0, 2196.0], [68.1, 2197.0], [68.2, 2197.0], [68.3, 2198.0], [68.4, 2204.0], [68.5, 2205.0], [68.6, 2206.0], [68.7, 2266.0], [68.8, 2269.0], [68.9, 2269.0], [69.0, 2270.0], [69.1, 2271.0], [69.2, 2272.0], [69.3, 2272.0], [69.4, 2273.0], [69.5, 2274.0], [69.6, 2274.0], [69.7, 2274.0], [69.8, 2275.0], [69.9, 2275.0], [70.0, 2275.0], [70.1, 2276.0], [70.2, 2276.0], [70.3, 2276.0], [70.4, 2276.0], [70.5, 2276.0], [70.6, 2277.0], [70.7, 2277.0], [70.8, 2277.0], [70.9, 2277.0], [71.0, 2278.0], [71.1, 2278.0], [71.2, 2278.0], [71.3, 2278.0], [71.4, 2278.0], [71.5, 2278.0], [71.6, 2279.0], [71.7, 2279.0], [71.8, 2279.0], [71.9, 2279.0], [72.0, 2280.0], [72.1, 2280.0], [72.2, 2280.0], [72.3, 2280.0], [72.4, 2280.0], [72.5, 2281.0], [72.6, 2281.0], [72.7, 2281.0], [72.8, 2281.0], [72.9, 2282.0], [73.0, 2283.0], [73.1, 2283.0], [73.2, 2283.0], [73.3, 2284.0], [73.4, 2284.0], [73.5, 2284.0], [73.6, 2285.0], [73.7, 2285.0], [73.8, 2286.0], [73.9, 2286.0], [74.0, 2286.0], [74.1, 2286.0], [74.2, 2286.0], [74.3, 2287.0], [74.4, 2287.0], [74.5, 2288.0], [74.6, 2288.0], [74.7, 2288.0], [74.8, 2288.0], [74.9, 2289.0], [75.0, 2289.0], [75.1, 2290.0], [75.2, 2290.0], [75.3, 2290.0], [75.4, 2290.0], [75.5, 2290.0], [75.6, 2290.0], [75.7, 2290.0], [75.8, 2291.0], [75.9, 2291.0], [76.0, 2291.0], [76.1, 2291.0], [76.2, 2291.0], [76.3, 2291.0], [76.4, 2292.0], [76.5, 2292.0], [76.6, 2292.0], [76.7, 2292.0], [76.8, 2292.0], [76.9, 2292.0], [77.0, 2293.0], [77.1, 2293.0], [77.2, 2293.0], [77.3, 2293.0], [77.4, 2293.0], [77.5, 2293.0], [77.6, 2294.0], [77.7, 2294.0], [77.8, 2294.0], [77.9, 2295.0], [78.0, 2296.0], [78.1, 2296.0], [78.2, 2296.0], [78.3, 2296.0], [78.4, 2296.0], [78.5, 2296.0], [78.6, 2297.0], [78.7, 2297.0], [78.8, 2297.0], [78.9, 2298.0], [79.0, 2298.0], [79.1, 2299.0], [79.2, 2299.0], [79.3, 2300.0], [79.4, 2300.0], [79.5, 2300.0], [79.6, 2300.0], [79.7, 2300.0], [79.8, 2300.0], [79.9, 2301.0], [80.0, 2301.0], [80.1, 2301.0], [80.2, 2302.0], [80.3, 2302.0], [80.4, 2302.0], [80.5, 2303.0], [80.6, 2303.0], [80.7, 2303.0], [80.8, 2304.0], [80.9, 2304.0], [81.0, 2304.0], [81.1, 2304.0], [81.2, 2304.0], [81.3, 2305.0], [81.4, 2305.0], [81.5, 2305.0], [81.6, 2305.0], [81.7, 2305.0], [81.8, 2305.0], [81.9, 2306.0], [82.0, 2306.0], [82.1, 2306.0], [82.2, 2306.0], [82.3, 2307.0], [82.4, 2308.0], [82.5, 2308.0], [82.6, 2308.0], [82.7, 2308.0], [82.8, 2310.0], [82.9, 2310.0], [83.0, 2310.0], [83.1, 2311.0], [83.2, 2312.0], [83.3, 2313.0], [83.4, 2314.0], [83.5, 2316.0], [83.6, 2316.0], [83.7, 2316.0], [83.8, 2317.0], [83.9, 2318.0], [84.0, 2319.0], [84.1, 2321.0], [84.2, 2321.0], [84.3, 2325.0], [84.4, 2364.0], [84.5, 2366.0], [84.6, 2375.0], [84.7, 2375.0], [84.8, 2376.0], [84.9, 2376.0], [85.0, 2377.0], [85.1, 2377.0], [85.2, 2377.0], [85.3, 2377.0], [85.4, 2378.0], [85.5, 2378.0], [85.6, 2378.0], [85.7, 2379.0], [85.8, 2379.0], [85.9, 2379.0], [86.0, 2379.0], [86.1, 2379.0], [86.2, 2380.0], [86.3, 2380.0], [86.4, 2380.0], [86.5, 2381.0], [86.6, 2381.0], [86.7, 2381.0], [86.8, 2382.0], [86.9, 2382.0], [87.0, 2382.0], [87.1, 2382.0], [87.2, 2383.0], [87.3, 2384.0], [87.4, 2384.0], [87.5, 2384.0], [87.6, 2385.0], [87.7, 2385.0], [87.8, 2386.0], [87.9, 2386.0], [88.0, 2386.0], [88.1, 2387.0], [88.2, 2388.0], [88.3, 2391.0], [88.4, 2391.0], [88.5, 2397.0], [88.6, 2399.0], [88.7, 2399.0], [88.8, 2400.0], [88.9, 2402.0], [89.0, 2488.0], [89.1, 2488.0], [89.2, 2495.0], [89.3, 2498.0], [89.4, 2503.0], [89.5, 2504.0], [89.6, 2504.0], [89.7, 2506.0], [89.8, 2578.0], [89.9, 2579.0], [90.0, 2589.0], [90.1, 2590.0], [90.2, 2591.0], [90.3, 2607.0], [90.4, 2608.0], [90.5, 2685.0], [90.6, 2686.0], [90.7, 2688.0], [90.8, 2688.0], [90.9, 2689.0], [91.0, 2689.0], [91.1, 2689.0], [91.2, 2689.0], [91.3, 2690.0], [91.4, 2692.0], [91.5, 2693.0], [91.6, 2694.0], [91.7, 2694.0], [91.8, 2695.0], [91.9, 2695.0], [92.0, 2696.0], [92.1, 2696.0], [92.2, 2698.0], [92.3, 2699.0], [92.4, 2702.0], [92.5, 2706.0], [92.6, 2706.0], [92.7, 2708.0], [92.8, 2709.0], [92.9, 2710.0], [93.0, 2760.0], [93.1, 2762.0], [93.2, 2920.0], [93.3, 3406.0], [93.4, 3408.0], [93.5, 3416.0], [93.6, 3519.0], [93.7, 3522.0], [93.8, 3708.0], [93.9, 3713.0], [94.0, 3714.0], [94.1, 3715.0], [94.2, 3716.0], [94.3, 3717.0], [94.4, 3723.0], [94.5, 3740.0], [94.6, 3741.0], [94.7, 3741.0], [94.8, 3742.0], [94.9, 3743.0], [95.0, 3744.0], [95.1, 3798.0], [95.2, 3804.0], [95.3, 3808.0], [95.4, 3813.0], [95.5, 3829.0], [95.6, 3830.0], [95.7, 3935.0], [95.8, 4043.0], [95.9, 4044.0], [96.0, 4045.0], [96.1, 4046.0], [96.2, 4046.0], [96.3, 4047.0], [96.4, 4047.0], [96.5, 4048.0], [96.6, 4050.0], [96.7, 4050.0], [96.8, 4051.0], [96.9, 4052.0], [97.0, 4052.0], [97.1, 4065.0], [97.2, 4066.0], [97.3, 4071.0], [97.4, 4076.0], [97.5, 4079.0], [97.6, 4103.0], [97.7, 4114.0], [97.8, 4116.0], [97.9, 4116.0], [98.0, 4117.0], [98.1, 4117.0], [98.2, 4117.0], [98.3, 4119.0], [98.4, 4119.0], [98.5, 4120.0], [98.6, 4120.0], [98.7, 4120.0], [98.8, 4123.0], [98.9, 4124.0], [99.0, 4140.0], [99.1, 4141.0], [99.2, 4141.0], [99.3, 4144.0], [99.4, 4145.0], [99.5, 4145.0], [99.6, 4199.0], [99.7, 4200.0], [99.8, 4216.0], [99.9, 4222.0]], "isOverall": false, "label": "商品列表", "isController": false}, {"data": [[0.0, 206.0], [0.1, 206.0], [0.2, 207.0], [0.3, 214.0], [0.4, 214.0], [0.5, 214.0], [0.6, 214.0], [0.7, 216.0], [0.8, 217.0], [0.9, 220.0], [1.0, 302.0], [1.1, 303.0], [1.2, 303.0], [1.3, 303.0], [1.4, 305.0], [1.5, 307.0], [1.6, 308.0], [1.7, 310.0], [1.8, 388.0], [1.9, 390.0], [2.0, 397.0], [2.1, 398.0], [2.2, 398.0], [2.3, 398.0], [2.4, 399.0], [2.5, 400.0], [2.6, 400.0], [2.7, 402.0], [2.8, 404.0], [2.9, 404.0], [3.0, 407.0], [3.1, 407.0], [3.2, 408.0], [3.3, 409.0], [3.4, 409.0], [3.5, 410.0], [3.6, 410.0], [3.7, 419.0], [3.8, 420.0], [3.9, 422.0], [4.0, 469.0], [4.1, 469.0], [4.2, 476.0], [4.3, 478.0], [4.4, 485.0], [4.5, 485.0], [4.6, 486.0], [4.7, 486.0], [4.8, 486.0], [4.9, 486.0], [5.0, 488.0], [5.1, 488.0], [5.2, 488.0], [5.3, 488.0], [5.4, 489.0], [5.5, 490.0], [5.6, 490.0], [5.7, 490.0], [5.8, 490.0], [5.9, 490.0], [6.0, 491.0], [6.1, 491.0], [6.2, 491.0], [6.3, 491.0], [6.4, 492.0], [6.5, 492.0], [6.6, 492.0], [6.7, 492.0], [6.8, 492.0], [6.9, 492.0], [7.0, 493.0], [7.1, 493.0], [7.2, 493.0], [7.3, 493.0], [7.4, 493.0], [7.5, 493.0], [7.6, 493.0], [7.7, 494.0], [7.8, 494.0], [7.9, 494.0], [8.0, 495.0], [8.1, 495.0], [8.2, 495.0], [8.3, 495.0], [8.4, 496.0], [8.5, 496.0], [8.6, 496.0], [8.7, 497.0], [8.8, 497.0], [8.9, 497.0], [9.0, 498.0], [9.1, 499.0], [9.2, 499.0], [9.3, 499.0], [9.4, 500.0], [9.5, 500.0], [9.6, 500.0], [9.7, 501.0], [9.8, 501.0], [9.9, 501.0], [10.0, 501.0], [10.1, 501.0], [10.2, 501.0], [10.3, 502.0], [10.4, 502.0], [10.5, 502.0], [10.6, 502.0], [10.7, 503.0], [10.8, 503.0], [10.9, 504.0], [11.0, 504.0], [11.1, 505.0], [11.2, 505.0], [11.3, 506.0], [11.4, 506.0], [11.5, 507.0], [11.6, 507.0], [11.7, 512.0], [11.8, 512.0], [11.9, 513.0], [12.0, 515.0], [12.1, 516.0], [12.2, 558.0], [12.3, 558.0], [12.4, 560.0], [12.5, 568.0], [12.6, 573.0], [12.7, 576.0], [12.8, 576.0], [12.9, 577.0], [13.0, 580.0], [13.1, 580.0], [13.2, 581.0], [13.3, 581.0], [13.4, 582.0], [13.5, 582.0], [13.6, 582.0], [13.7, 582.0], [13.8, 583.0], [13.9, 583.0], [14.0, 583.0], [14.1, 583.0], [14.2, 584.0], [14.3, 584.0], [14.4, 585.0], [14.5, 585.0], [14.6, 585.0], [14.7, 586.0], [14.8, 587.0], [14.9, 587.0], [15.0, 588.0], [15.1, 588.0], [15.2, 588.0], [15.3, 588.0], [15.4, 589.0], [15.5, 590.0], [15.6, 591.0], [15.7, 591.0], [15.8, 591.0], [15.9, 591.0], [16.0, 592.0], [16.1, 592.0], [16.2, 592.0], [16.3, 592.0], [16.4, 593.0], [16.5, 593.0], [16.6, 594.0], [16.7, 594.0], [16.8, 595.0], [16.9, 595.0], [17.0, 595.0], [17.1, 595.0], [17.2, 595.0], [17.3, 595.0], [17.4, 596.0], [17.5, 596.0], [17.6, 596.0], [17.7, 597.0], [17.8, 597.0], [17.9, 597.0], [18.0, 597.0], [18.1, 598.0], [18.2, 598.0], [18.3, 598.0], [18.4, 598.0], [18.5, 598.0], [18.6, 599.0], [18.7, 600.0], [18.8, 600.0], [18.9, 600.0], [19.0, 600.0], [19.1, 601.0], [19.2, 601.0], [19.3, 601.0], [19.4, 601.0], [19.5, 601.0], [19.6, 601.0], [19.7, 602.0], [19.8, 602.0], [19.9, 603.0], [20.0, 604.0], [20.1, 604.0], [20.2, 604.0], [20.3, 605.0], [20.4, 606.0], [20.5, 607.0], [20.6, 607.0], [20.7, 607.0], [20.8, 610.0], [20.9, 651.0], [21.0, 659.0], [21.1, 660.0], [21.2, 662.0], [21.3, 664.0], [21.4, 667.0], [21.5, 667.0], [21.6, 668.0], [21.7, 668.0], [21.8, 669.0], [21.9, 670.0], [22.0, 670.0], [22.1, 671.0], [22.2, 673.0], [22.3, 673.0], [22.4, 674.0], [22.5, 675.0], [22.6, 678.0], [22.7, 681.0], [22.8, 682.0], [22.9, 683.0], [23.0, 684.0], [23.1, 684.0], [23.2, 684.0], [23.3, 685.0], [23.4, 685.0], [23.5, 685.0], [23.6, 685.0], [23.7, 686.0], [23.8, 686.0], [23.9, 686.0], [24.0, 686.0], [24.1, 687.0], [24.2, 687.0], [24.3, 687.0], [24.4, 688.0], [24.5, 688.0], [24.6, 688.0], [24.7, 688.0], [24.8, 689.0], [24.9, 689.0], [25.0, 689.0], [25.1, 689.0], [25.2, 689.0], [25.3, 690.0], [25.4, 690.0], [25.5, 690.0], [25.6, 690.0], [25.7, 690.0], [25.8, 691.0], [25.9, 691.0], [26.0, 692.0], [26.1, 692.0], [26.2, 692.0], [26.3, 692.0], [26.4, 693.0], [26.5, 693.0], [26.6, 693.0], [26.7, 693.0], [26.8, 693.0], [26.9, 693.0], [27.0, 694.0], [27.1, 694.0], [27.2, 695.0], [27.3, 695.0], [27.4, 695.0], [27.5, 695.0], [27.6, 696.0], [27.7, 697.0], [27.8, 697.0], [27.9, 698.0], [28.0, 698.0], [28.1, 698.0], [28.2, 698.0], [28.3, 699.0], [28.4, 699.0], [28.5, 699.0], [28.6, 700.0], [28.7, 700.0], [28.8, 700.0], [28.9, 700.0], [29.0, 700.0], [29.1, 700.0], [29.2, 700.0], [29.3, 700.0], [29.4, 701.0], [29.5, 701.0], [29.6, 702.0], [29.7, 702.0], [29.8, 702.0], [29.9, 703.0], [30.0, 704.0], [30.1, 704.0], [30.2, 712.0], [30.3, 716.0], [30.4, 741.0], [30.5, 743.0], [30.6, 743.0], [30.7, 759.0], [30.8, 759.0], [30.9, 761.0], [31.0, 766.0], [31.1, 767.0], [31.2, 767.0], [31.3, 768.0], [31.4, 769.0], [31.5, 769.0], [31.6, 769.0], [31.7, 769.0], [31.8, 770.0], [31.9, 770.0], [32.0, 771.0], [32.1, 771.0], [32.2, 771.0], [32.3, 771.0], [32.4, 772.0], [32.5, 772.0], [32.6, 772.0], [32.7, 772.0], [32.8, 773.0], [32.9, 773.0], [33.0, 774.0], [33.1, 774.0], [33.2, 775.0], [33.3, 775.0], [33.4, 775.0], [33.5, 775.0], [33.6, 775.0], [33.7, 776.0], [33.8, 776.0], [33.9, 777.0], [34.0, 777.0], [34.1, 777.0], [34.2, 777.0], [34.3, 778.0], [34.4, 778.0], [34.5, 778.0], [34.6, 778.0], [34.7, 779.0], [34.8, 779.0], [34.9, 779.0], [35.0, 779.0], [35.1, 779.0], [35.2, 779.0], [35.3, 780.0], [35.4, 780.0], [35.5, 780.0], [35.6, 781.0], [35.7, 781.0], [35.8, 781.0], [35.9, 782.0], [36.0, 782.0], [36.1, 782.0], [36.2, 783.0], [36.3, 783.0], [36.4, 784.0], [36.5, 784.0], [36.6, 785.0], [36.7, 785.0], [36.8, 786.0], [36.9, 786.0], [37.0, 786.0], [37.1, 787.0], [37.2, 787.0], [37.3, 787.0], [37.4, 787.0], [37.5, 787.0], [37.6, 788.0], [37.7, 788.0], [37.8, 788.0], [37.9, 789.0], [38.0, 789.0], [38.1, 789.0], [38.2, 789.0], [38.3, 789.0], [38.4, 790.0], [38.5, 790.0], [38.6, 790.0], [38.7, 791.0], [38.8, 791.0], [38.9, 791.0], [39.0, 791.0], [39.1, 792.0], [39.2, 792.0], [39.3, 792.0], [39.4, 792.0], [39.5, 793.0], [39.6, 793.0], [39.7, 794.0], [39.8, 794.0], [39.9, 794.0], [40.0, 795.0], [40.1, 795.0], [40.2, 795.0], [40.3, 795.0], [40.4, 796.0], [40.5, 796.0], [40.6, 796.0], [40.7, 796.0], [40.8, 797.0], [40.9, 797.0], [41.0, 797.0], [41.1, 797.0], [41.2, 798.0], [41.3, 798.0], [41.4, 798.0], [41.5, 798.0], [41.6, 798.0], [41.7, 798.0], [41.8, 798.0], [41.9, 798.0], [42.0, 799.0], [42.1, 799.0], [42.2, 799.0], [42.3, 799.0], [42.4, 799.0], [42.5, 799.0], [42.6, 799.0], [42.7, 800.0], [42.8, 800.0], [42.9, 800.0], [43.0, 800.0], [43.1, 800.0], [43.2, 801.0], [43.3, 801.0], [43.4, 801.0], [43.5, 801.0], [43.6, 801.0], [43.7, 801.0], [43.8, 801.0], [43.9, 801.0], [44.0, 802.0], [44.1, 802.0], [44.2, 802.0], [44.3, 802.0], [44.4, 803.0], [44.5, 803.0], [44.6, 804.0], [44.7, 806.0], [44.8, 806.0], [44.9, 856.0], [45.0, 857.0], [45.1, 859.0], [45.2, 859.0], [45.3, 859.0], [45.4, 860.0], [45.5, 860.0], [45.6, 861.0], [45.7, 861.0], [45.8, 862.0], [45.9, 862.0], [46.0, 864.0], [46.1, 865.0], [46.2, 866.0], [46.3, 866.0], [46.4, 866.0], [46.5, 867.0], [46.6, 868.0], [46.7, 868.0], [46.8, 868.0], [46.9, 869.0], [47.0, 871.0], [47.1, 871.0], [47.2, 871.0], [47.3, 871.0], [47.4, 873.0], [47.5, 873.0], [47.6, 874.0], [47.7, 875.0], [47.8, 875.0], [47.9, 875.0], [48.0, 876.0], [48.1, 876.0], [48.2, 876.0], [48.3, 876.0], [48.4, 877.0], [48.5, 877.0], [48.6, 877.0], [48.7, 878.0], [48.8, 878.0], [48.9, 878.0], [49.0, 878.0], [49.1, 878.0], [49.2, 879.0], [49.3, 879.0], [49.4, 880.0], [49.5, 880.0], [49.6, 881.0], [49.7, 881.0], [49.8, 881.0], [49.9, 883.0], [50.0, 885.0], [50.1, 886.0], [50.2, 886.0], [50.3, 886.0], [50.4, 887.0], [50.5, 888.0], [50.6, 888.0], [50.7, 888.0], [50.8, 889.0], [50.9, 890.0], [51.0, 890.0], [51.1, 891.0], [51.2, 891.0], [51.3, 891.0], [51.4, 891.0], [51.5, 891.0], [51.6, 891.0], [51.7, 892.0], [51.8, 892.0], [51.9, 892.0], [52.0, 892.0], [52.1, 893.0], [52.2, 893.0], [52.3, 893.0], [52.4, 894.0], [52.5, 894.0], [52.6, 894.0], [52.7, 895.0], [52.8, 895.0], [52.9, 895.0], [53.0, 896.0], [53.1, 896.0], [53.2, 897.0], [53.3, 897.0], [53.4, 897.0], [53.5, 898.0], [53.6, 898.0], [53.7, 899.0], [53.8, 901.0], [53.9, 901.0], [54.0, 904.0], [54.1, 955.0], [54.2, 957.0], [54.3, 957.0], [54.4, 959.0], [54.5, 960.0], [54.6, 960.0], [54.7, 960.0], [54.8, 961.0], [54.9, 961.0], [55.0, 961.0], [55.1, 962.0], [55.2, 963.0], [55.3, 963.0], [55.4, 963.0], [55.5, 963.0], [55.6, 963.0], [55.7, 963.0], [55.8, 963.0], [55.9, 964.0], [56.0, 964.0], [56.1, 966.0], [56.2, 966.0], [56.3, 966.0], [56.4, 967.0], [56.5, 967.0], [56.6, 967.0], [56.7, 968.0], [56.8, 968.0], [56.9, 969.0], [57.0, 969.0], [57.1, 969.0], [57.2, 971.0], [57.3, 971.0], [57.4, 972.0], [57.5, 972.0], [57.6, 972.0], [57.7, 972.0], [57.8, 973.0], [57.9, 973.0], [58.0, 973.0], [58.1, 975.0], [58.2, 975.0], [58.3, 976.0], [58.4, 976.0], [58.5, 977.0], [58.6, 977.0], [58.7, 977.0], [58.8, 977.0], [58.9, 978.0], [59.0, 978.0], [59.1, 981.0], [59.2, 981.0], [59.3, 981.0], [59.4, 982.0], [59.5, 982.0], [59.6, 982.0], [59.7, 983.0], [59.8, 983.0], [59.9, 983.0], [60.0, 983.0], [60.1, 984.0], [60.2, 984.0], [60.3, 985.0], [60.4, 985.0], [60.5, 985.0], [60.6, 985.0], [60.7, 986.0], [60.8, 986.0], [60.9, 986.0], [61.0, 986.0], [61.1, 987.0], [61.2, 987.0], [61.3, 987.0], [61.4, 988.0], [61.5, 988.0], [61.6, 988.0], [61.7, 989.0], [61.8, 989.0], [61.9, 989.0], [62.0, 989.0], [62.1, 990.0], [62.2, 990.0], [62.3, 990.0], [62.4, 990.0], [62.5, 991.0], [62.6, 991.0], [62.7, 991.0], [62.8, 991.0], [62.9, 992.0], [63.0, 992.0], [63.1, 992.0], [63.2, 992.0], [63.3, 992.0], [63.4, 992.0], [63.5, 992.0], [63.6, 992.0], [63.7, 993.0], [63.8, 993.0], [63.9, 993.0], [64.0, 994.0], [64.1, 994.0], [64.2, 994.0], [64.3, 994.0], [64.4, 994.0], [64.5, 995.0], [64.6, 995.0], [64.7, 995.0], [64.8, 995.0], [64.9, 996.0], [65.0, 996.0], [65.1, 996.0], [65.2, 997.0], [65.3, 997.0], [65.4, 998.0], [65.5, 998.0], [65.6, 998.0], [65.7, 999.0], [65.8, 999.0], [65.9, 1000.0], [66.0, 1000.0], [66.1, 1000.0], [66.2, 1000.0], [66.3, 1001.0], [66.4, 1003.0], [66.5, 1004.0], [66.6, 1017.0], [66.7, 1047.0], [66.8, 1049.0], [66.9, 1052.0], [67.0, 1053.0], [67.1, 1056.0], [67.2, 1060.0], [67.3, 1061.0], [67.4, 1062.0], [67.5, 1063.0], [67.6, 1063.0], [67.7, 1064.0], [67.8, 1065.0], [67.9, 1065.0], [68.0, 1065.0], [68.1, 1067.0], [68.2, 1067.0], [68.3, 1068.0], [68.4, 1069.0], [68.5, 1069.0], [68.6, 1069.0], [68.7, 1069.0], [68.8, 1070.0], [68.9, 1070.0], [69.0, 1071.0], [69.1, 1072.0], [69.2, 1072.0], [69.3, 1072.0], [69.4, 1072.0], [69.5, 1072.0], [69.6, 1073.0], [69.7, 1074.0], [69.8, 1074.0], [69.9, 1074.0], [70.0, 1074.0], [70.1, 1074.0], [70.2, 1074.0], [70.3, 1075.0], [70.4, 1076.0], [70.5, 1076.0], [70.6, 1076.0], [70.7, 1076.0], [70.8, 1077.0], [70.9, 1077.0], [71.0, 1077.0], [71.1, 1077.0], [71.2, 1078.0], [71.3, 1078.0], [71.4, 1078.0], [71.5, 1078.0], [71.6, 1079.0], [71.7, 1080.0], [71.8, 1081.0], [71.9, 1081.0], [72.0, 1081.0], [72.1, 1082.0], [72.2, 1083.0], [72.3, 1083.0], [72.4, 1085.0], [72.5, 1085.0], [72.6, 1085.0], [72.7, 1087.0], [72.8, 1088.0], [72.9, 1088.0], [73.0, 1088.0], [73.1, 1090.0], [73.2, 1091.0], [73.3, 1092.0], [73.4, 1092.0], [73.5, 1093.0], [73.6, 1093.0], [73.7, 1094.0], [73.8, 1094.0], [73.9, 1094.0], [74.0, 1094.0], [74.1, 1094.0], [74.2, 1095.0], [74.3, 1095.0], [74.4, 1095.0], [74.5, 1095.0], [74.6, 1096.0], [74.7, 1096.0], [74.8, 1096.0], [74.9, 1096.0], [75.0, 1096.0], [75.1, 1097.0], [75.2, 1097.0], [75.3, 1097.0], [75.4, 1098.0], [75.5, 1098.0], [75.6, 1098.0], [75.7, 1099.0], [75.8, 1099.0], [75.9, 1100.0], [76.0, 1101.0], [76.1, 1103.0], [76.2, 1103.0], [76.3, 1105.0], [76.4, 1108.0], [76.5, 1116.0], [76.6, 1120.0], [76.7, 1122.0], [76.8, 1153.0], [76.9, 1153.0], [77.0, 1156.0], [77.1, 1158.0], [77.2, 1158.0], [77.3, 1162.0], [77.4, 1162.0], [77.5, 1163.0], [77.6, 1163.0], [77.7, 1165.0], [77.8, 1166.0], [77.9, 1166.0], [78.0, 1166.0], [78.1, 1167.0], [78.2, 1168.0], [78.3, 1168.0], [78.4, 1169.0], [78.5, 1169.0], [78.6, 1169.0], [78.7, 1171.0], [78.8, 1171.0], [78.9, 1171.0], [79.0, 1171.0], [79.1, 1172.0], [79.2, 1172.0], [79.3, 1172.0], [79.4, 1173.0], [79.5, 1173.0], [79.6, 1174.0], [79.7, 1174.0], [79.8, 1174.0], [79.9, 1174.0], [80.0, 1174.0], [80.1, 1174.0], [80.2, 1174.0], [80.3, 1175.0], [80.4, 1175.0], [80.5, 1175.0], [80.6, 1176.0], [80.7, 1178.0], [80.8, 1178.0], [80.9, 1179.0], [81.0, 1179.0], [81.1, 1179.0], [81.2, 1179.0], [81.3, 1179.0], [81.4, 1180.0], [81.5, 1180.0], [81.6, 1180.0], [81.7, 1180.0], [81.8, 1181.0], [81.9, 1181.0], [82.0, 1181.0], [82.1, 1182.0], [82.2, 1182.0], [82.3, 1183.0], [82.4, 1183.0], [82.5, 1183.0], [82.6, 1184.0], [82.7, 1185.0], [82.8, 1185.0], [82.9, 1185.0], [83.0, 1186.0], [83.1, 1188.0], [83.2, 1188.0], [83.3, 1188.0], [83.4, 1189.0], [83.5, 1189.0], [83.6, 1189.0], [83.7, 1191.0], [83.8, 1191.0], [83.9, 1192.0], [84.0, 1192.0], [84.1, 1192.0], [84.2, 1193.0], [84.3, 1193.0], [84.4, 1194.0], [84.5, 1194.0], [84.6, 1194.0], [84.7, 1195.0], [84.8, 1195.0], [84.9, 1195.0], [85.0, 1196.0], [85.1, 1197.0], [85.2, 1197.0], [85.3, 1197.0], [85.4, 1198.0], [85.5, 1198.0], [85.6, 1198.0], [85.7, 1199.0], [85.8, 1199.0], [85.9, 1199.0], [86.0, 1200.0], [86.1, 1201.0], [86.2, 1201.0], [86.3, 1201.0], [86.4, 1249.0], [86.5, 1256.0], [86.6, 1256.0], [86.7, 1258.0], [86.8, 1258.0], [86.9, 1262.0], [87.0, 1264.0], [87.1, 1267.0], [87.2, 1268.0], [87.3, 1268.0], [87.4, 1270.0], [87.5, 1270.0], [87.6, 1271.0], [87.7, 1271.0], [87.8, 1271.0], [87.9, 1272.0], [88.0, 1272.0], [88.1, 1273.0], [88.2, 1274.0], [88.3, 1274.0], [88.4, 1275.0], [88.5, 1275.0], [88.6, 1275.0], [88.7, 1275.0], [88.8, 1276.0], [88.9, 1277.0], [89.0, 1277.0], [89.1, 1280.0], [89.2, 1283.0], [89.3, 1284.0], [89.4, 1287.0], [89.5, 1288.0], [89.6, 1289.0], [89.7, 1290.0], [89.8, 1290.0], [89.9, 1290.0], [90.0, 1291.0], [90.1, 1295.0], [90.2, 1295.0], [90.3, 1297.0], [90.4, 1337.0], [90.5, 1341.0], [90.6, 1343.0], [90.7, 1347.0], [90.8, 1349.0], [90.9, 1349.0], [91.0, 1356.0], [91.1, 1359.0], [91.2, 1359.0], [91.3, 1360.0], [91.4, 1361.0], [91.5, 1363.0], [91.6, 1364.0], [91.7, 1367.0], [91.8, 1371.0], [91.9, 1372.0], [92.0, 1373.0], [92.1, 1378.0], [92.2, 1379.0], [92.3, 1380.0], [92.4, 1386.0], [92.5, 1387.0], [92.6, 1389.0], [92.7, 1390.0], [92.8, 1392.0], [92.9, 1394.0], [93.0, 1395.0], [93.1, 1440.0], [93.2, 1442.0], [93.3, 1444.0], [93.4, 1449.0], [93.5, 1452.0], [93.6, 1454.0], [93.7, 1459.0], [93.8, 1459.0], [93.9, 1461.0], [94.0, 1462.0], [94.1, 1463.0], [94.2, 1474.0], [94.3, 1476.0], [94.4, 1479.0], [94.5, 1481.0], [94.6, 1482.0], [94.7, 1483.0], [94.8, 1486.0], [94.9, 1486.0], [95.0, 1488.0], [95.1, 1489.0], [95.2, 1490.0], [95.3, 1490.0], [95.4, 1492.0], [95.5, 1493.0], [95.6, 1497.0], [95.7, 1500.0], [95.8, 1500.0], [95.9, 1502.0], [96.0, 1503.0], [96.1, 1548.0], [96.2, 1551.0], [96.3, 1552.0], [96.4, 1556.0], [96.5, 1561.0], [96.6, 1562.0], [96.7, 1563.0], [96.8, 1568.0], [96.9, 1570.0], [97.0, 1575.0], [97.1, 1578.0], [97.2, 1579.0], [97.3, 1581.0], [97.4, 1585.0], [97.5, 1589.0], [97.6, 1596.0], [97.7, 1642.0], [97.8, 1643.0], [97.9, 1644.0], [98.0, 1645.0], [98.1, 1651.0], [98.2, 1651.0], [98.3, 1652.0], [98.4, 1656.0], [98.5, 1657.0], [98.6, 1660.0], [98.7, 1663.0], [98.8, 1663.0], [98.9, 1664.0], [99.0, 1665.0], [99.1, 1668.0], [99.2, 1671.0], [99.3, 1677.0], [99.4, 1679.0], [99.5, 1680.0], [99.6, 1684.0], [99.7, 1754.0], [99.8, 1755.0], [99.9, 1762.0], [100.0, 1768.0]], "isOverall": false, "label": "商品详情", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 200.0, "maxY": 183.0, "series": [{"data": [[700.0, 1.0], [900.0, 7.0], [1000.0, 2.0], [1100.0, 25.0], [1200.0, 26.0], [1300.0, 32.0], [1400.0, 76.0], [1500.0, 57.0], [1600.0, 126.0], [1700.0, 147.0], [1800.0, 85.0], [1900.0, 79.0], [2000.0, 140.0], [2100.0, 137.0], [2200.0, 153.0], [2300.0, 133.0], [2400.0, 8.0], [2500.0, 13.0], [2600.0, 29.0], [2700.0, 11.0], [2900.0, 1.0], [3100.0, 1.0], [3400.0, 4.0], [3500.0, 3.0], [3700.0, 19.0], [3800.0, 7.0], [3900.0, 1.0], [4000.0, 26.0], [4100.0, 29.0], [4200.0, 5.0], [300.0, 6.0], [400.0, 11.0]], "isOverall": false, "label": "商品列表", "isController": false}, {"data": [[600.0, 128.0], [700.0, 183.0], [200.0, 13.0], [800.0, 145.0], [900.0, 157.0], [1000.0, 130.0], [1100.0, 131.0], [300.0, 19.0], [1200.0, 58.0], [1300.0, 35.0], [1400.0, 34.0], [1500.0, 25.0], [1600.0, 26.0], [400.0, 90.0], [1700.0, 5.0], [500.0, 121.0]], "isOverall": false, "label": "商品详情", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 4200.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 143.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 1290.0, "series": [{"data": [[0.0, 143.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 1290.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 1267.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 98.23538344722856, "minX": 1.74910314E12, "maxY": 100.0, "series": [{"data": [[1.7491032E12, 98.23538344722856], [1.74910314E12, 100.0]], "isOverall": false, "label": "线程组", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.7491032E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 908.9123076923083, "minX": 2.0, "maxY": 2102.7302075326697, "series": [{"data": [[33.0, 1665.0], [32.0, 1687.0], [2.0, 1784.5], [37.0, 1666.3333333333333], [36.0, 1668.0], [39.0, 1668.0], [46.0, 1590.0], [49.0, 1587.3333333333333], [48.0, 1573.0], [50.0, 1588.75], [53.0, 1573.0], [55.0, 1575.5], [57.0, 1584.75], [56.0, 1582.0], [58.0, 1574.0], [63.0, 1487.0], [66.0, 1471.0], [65.0, 1482.5], [64.0, 1488.5], [71.0, 1393.0], [70.0, 1391.0], [69.0, 1392.0], [74.0, 1383.5], [79.0, 1390.0], [78.0, 1387.25], [76.0, 1390.5], [83.0, 1286.0], [81.0, 1390.0], [87.0, 1280.0], [86.0, 1282.5], [84.0, 1284.0], [91.0, 1191.0], [88.0, 1195.0], [95.0, 1005.0], [94.0, 1089.0], [93.0, 1187.5], [92.0, 1187.0], [99.0, 994.0], [98.0, 997.3333333333334], [6.0, 1777.5], [100.0, 2102.7302075326697], [21.0, 1689.0], [24.0, 1681.6666666666667], [25.0, 1682.3333333333333], [26.0, 1687.3999999999999], [28.0, 1690.5], [29.0, 1695.0], [31.0, 1679.5]], "isOverall": false, "label": "商品列表", "isController": false}, {"data": [[96.68000000000002, 2061.107142857144]], "isOverall": false, "label": "商品列表-Aggregated", "isController": false}, {"data": [[100.0, 908.9123076923083]], "isOverall": false, "label": "商品详情", "isController": false}, {"data": [[100.0, 908.9123076923083]], "isOverall": false, "label": "商品详情-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 356.4, "minX": 1.74910314E12, "maxY": 413491.45, "series": [{"data": [[1.7491032E12, 413491.45], [1.74910314E12, 11737.0]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.7491032E12, 14613.6], [1.74910314E12, 356.4]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.7491032E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 908.9123076923083, "minX": 1.74910314E12, "maxY": 3707.287878787879, "series": [{"data": [[1.7491032E12, 1979.661919040478], [1.74910314E12, 3707.287878787879]], "isOverall": false, "label": "商品列表", "isController": false}, {"data": [[1.7491032E12, 908.9123076923083]], "isOverall": false, "label": "商品详情", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.7491032E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 894.9746153846166, "minX": 1.74910314E12, "maxY": 3700.212121212122, "series": [{"data": [[1.7491032E12, 1924.9475262368817], [1.74910314E12, 3700.212121212122]], "isOverall": false, "label": "商品列表", "isController": false}, {"data": [[1.7491032E12, 894.9746153846166]], "isOverall": false, "label": "商品详情", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.7491032E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.74910314E12, "maxY": 69.30303030303028, "series": [{"data": [[1.7491032E12, 1.97376311844078], [1.74910314E12, 69.30303030303028]], "isOverall": false, "label": "商品列表", "isController": false}, {"data": [[1.7491032E12, 0.0]], "isOverall": false, "label": "商品详情", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.7491032E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 206.0, "minX": 1.74910314E12, "maxY": 4226.0, "series": [{"data": [[1.7491032E12, 4226.0], [1.74910314E12, 4079.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.7491032E12, 2292.0], [1.74910314E12, 4065.3]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.7491032E12, 4117.0], [1.74910314E12, 4079.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.7491032E12, 2379.0], [1.74910314E12, 4074.25]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.7491032E12, 206.0], [1.74910314E12, 1112.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.7491032E12, 1397.5], [1.74910314E12, 3806.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.7491032E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 700.0, "minX": 1.0, "maxY": 4119.0, "series": [{"data": [[2.0, 1126.5], [35.0, 1483.0], [40.0, 1498.5], [42.0, 1383.5], [44.0, 4119.0], [45.0, 1217.5], [3.0, 2608.0], [49.0, 1795.0], [50.0, 983.5], [53.0, 1402.0], [57.0, 1090.0], [58.0, 1423.5], [61.0, 3813.0], [65.0, 969.0], [67.0, 1303.0], [4.0, 1445.0], [66.0, 700.0], [75.0, 791.0], [73.0, 801.0], [87.0, 1700.0], [84.0, 2277.0], [86.0, 2097.5], [90.0, 1417.5], [89.0, 974.0], [93.0, 1798.0], [94.0, 2103.0], [99.0, 1602.0], [96.0, 2091.5], [101.0, 2096.0], [100.0, 994.0], [102.0, 798.0], [109.0, 2067.0], [1.0, 1610.0], [18.0, 1469.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 109.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 695.5, "minX": 1.0, "maxY": 4103.5, "series": [{"data": [[2.0, 1121.5], [35.0, 1483.0], [40.0, 1498.0], [42.0, 1286.0], [44.0, 4103.5], [45.0, 1175.5], [3.0, 2608.0], [49.0, 1717.0], [50.0, 983.5], [53.0, 1401.5], [57.0, 1088.0], [58.0, 1366.5], [61.0, 3805.0], [65.0, 959.0], [67.0, 1303.0], [4.0, 1445.0], [66.0, 695.5], [75.0, 702.0], [73.0, 800.0], [87.0, 1700.0], [84.0, 2082.5], [86.0, 2095.0], [90.0, 1417.5], [89.0, 974.0], [93.0, 1792.0], [94.0, 2003.0], [99.0, 1602.0], [96.0, 2080.0], [101.0, 1991.0], [100.0, 990.5], [102.0, 793.5], [109.0, 1779.0], [1.0, 1608.0], [18.0, 1469.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 109.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 1.6666666666666667, "minX": 1.74910314E12, "maxY": 43.333333333333336, "series": [{"data": [[1.7491032E12, 43.333333333333336], [1.74910314E12, 1.6666666666666667]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.7491032E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 1.1, "minX": 1.74910314E12, "maxY": 43.9, "series": [{"data": [[1.7491032E12, 43.9], [1.74910314E12, 1.1]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.7491032E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 1.1, "minX": 1.74910314E12, "maxY": 22.233333333333334, "series": [{"data": [[1.7491032E12, 22.233333333333334], [1.74910314E12, 1.1]], "isOverall": false, "label": "商品列表-success", "isController": false}, {"data": [[1.7491032E12, 21.666666666666668]], "isOverall": false, "label": "商品详情-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.7491032E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 1.1, "minX": 1.74910314E12, "maxY": 43.9, "series": [{"data": [[1.7491032E12, 43.9], [1.74910314E12, 1.1]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.7491032E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

